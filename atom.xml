<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wall&#39;s blog</title>
  <subtitle>努力向上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wall-wxk.github.io/"/>
  <updated>2017-02-27T13:51:52.000Z</updated>
  <id>https://wall-wxk.github.io/</id>
  
  <author>
    <name>wall</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript两个变量交换值（不使用临时变量）</title>
    <link href="https://wall-wxk.github.io/2017/02/27/exchangeValue/"/>
    <id>https://wall-wxk.github.io/2017/02/27/exchangeValue/</id>
    <published>2017-02-27T13:04:08.000Z</published>
    <updated>2017-02-27T13:51:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p> 本文主要描述，如何不使用中间值，将两个变量的值进行交换。</p>
<h1 id="一、普通做法"><a href="#一、普通做法" class="headerlink" title="一、普通做法"></a>一、普通做法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>,</div><div class="line">	b = <span class="number">2</span>,</div><div class="line">	tmp;</div><div class="line"></div><div class="line">tmp = a;</div><div class="line">a = b;</div><div class="line">b = tmp;</div></pre></td></tr></table></figure>
<p> 普通的做法就是声明多一个临时变量<code>tmp</code>，进行数据交换过程中的缓存。这样的做法直观，易懂。但是，会增加内存的使用。</p>
<h1 id="二、算术运算"><a href="#二、算术运算" class="headerlink" title="二、算术运算"></a>二、算术运算</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>,</div><div class="line">	b = <span class="number">2</span>;</div><div class="line"></div><div class="line">a = a + b; <span class="comment">// a = 3, b = 2</span></div><div class="line">b = a - b; <span class="comment">// a = 3, b = 1</span></div><div class="line">a = a - b; <span class="comment">// a = 2, b = 1</span></div></pre></td></tr></table></figure>
<p> 通过算术运算过程中的技巧，可以巧妙地将两个值进行互换。但是，有个缺点就是变量数据溢出。因为JavaScript能存储数字的精度范围是 <strong>-2<sup>53</sup> 到 2<sup>53</sup></strong>。所以，加法运算，会存在溢出的问题。</p>
<h1 id="三、异或运算"><a href="#三、异或运算" class="headerlink" title="三、异或运算"></a>三、异或运算</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>, <span class="comment">// 二进制：0001</span></div><div class="line">	b = <span class="number">2</span>;	<span class="comment">// 二进制：0010</span></div><div class="line"></div><div class="line">a = a ^ b; <span class="comment">// 计算结果：a = 0011, b = 0010</span></div><div class="line">b = a ^ b; <span class="comment">// 计算结果：a = 0011, b = 0001</span></div><div class="line">a = a ^ b; <span class="comment">// 计算结果：a = 0010, b = 0001</span></div></pre></td></tr></table></figure>
<p> 本题巧用位运算的技巧，利用 <code>a ^ b ^ b == a</code> 的特点，进行数值交换，避免了使用算术运算带来的弊端，不会发生溢出问题。</p>
<h1 id="四、ES6的解构"><a href="#四、ES6的解构" class="headerlink" title="四、ES6的解构"></a>四、ES6的解构</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>,</div><div class="line">	b = <span class="number">2</span>;</div><div class="line"></div><div class="line">[a, b] = [b, a];</div></pre></td></tr></table></figure>
<p> 用解构的语法特性，一次性解决，简单暴力，哈哈哈~<br> <strong>更重要的一点：</strong>解构语法还适用于其他类型的变量进行互换。所以，用解构可以很easy地进行互换。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt; 本文主要描述，如何不使用中间值，将两个变量的值进行交换。&lt;/p&gt;
&lt;h1 id=&quot;一、普通做法&quot;&gt;&lt;a href=&quot;#一、普通做法&quot; cl
    
    </summary>
    
      <category term="JavaScript" scheme="https://wall-wxk.github.io/categories/JavaScript/"/>
    
    
      <category term="解构" scheme="https://wall-wxk.github.io/tags/%E8%A7%A3%E6%9E%84/"/>
    
      <category term="异或" scheme="https://wall-wxk.github.io/tags/%E5%BC%82%E6%88%96/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript函数节流和函数防抖之间的区别</title>
    <link href="https://wall-wxk.github.io/2017/02/15/throttleAndDebounce/"/>
    <id>https://wall-wxk.github.io/2017/02/15/throttleAndDebounce/</id>
    <published>2017-02-14T23:15:35.000Z</published>
    <updated>2017-02-18T15:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、概念解释"><a href="#一、概念解释" class="headerlink" title="一、概念解释"></a>一、概念解释</h2><p> 函数节流和函数防抖，两者都是优化高频率执行js代码的一种手段。<br> 大家大概都知道旧款电视机的工作原理，就是一行行得扫描出色彩到屏幕上，然后组成一张张图片。由于肉眼只能分辨出一定频率的变化，当高频率的扫描，人类是感觉不出来的。反而形成一种视觉效果，就是一张图。就像高速旋转的风扇，你看不到扇叶，只看到了一个圆一样。<br> 同理，可以类推到js代码。在一定时间内，代码执行的次数不一定要非常多。达到一定频率就足够了。因为跑得越多，带来的效果也是一样。倒不如，把js代码的执行次数控制在合理的范围。既能节省浏览器CPU资源，又能让页面浏览更加顺畅，不会因为js的执行而发生卡顿。这就是函数节流和函数防抖要做的事。</p>
<p> <strong>函数节流</strong>是指一定时间内js方法只跑一次。比如人的眨眼睛，就是一定时间内眨一次。这是函数节流最形象的解释。<br> <strong>函数防抖</strong>是指频繁触发的情况下，只有足够的空闲时间，才执行代码一次。比如生活中的坐公交，就是一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有别人没刷卡了，司机才开车。</p>
<h2 id="二、函数节流"><a href="#二、函数节流" class="headerlink" title="二、函数节流"></a>二、函数节流</h2><p> 函数节流应用的实际场景，多数在监听页面元素滚动事件的时候会用到。因为滚动事件，是一个高频触发的事件。以下是监听页面元素滚动的示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数节流</span></div><div class="line"><span class="keyword">var</span> canRun = <span class="literal">true</span>;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"throttle"</span>).onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(!canRun)&#123;</div><div class="line">		<span class="comment">// 判断是否已空闲，如果在执行中，则直接return</span></div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	canRun = <span class="literal">false</span>;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"函数节流"</span>);</div><div class="line">		canRun = <span class="literal">true</span>;</div><div class="line">	&#125;, <span class="number">300</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p> 函数节流的要点是，声明一个变量当标志位，记录当前代码是否在执行。<br> 如果空闲，则可以正常触发方法执行。<br> 如果代码正在执行，则取消这次方法执行，直接<code>return</code>。</p>
<blockquote>
<p> 这个方法的作用是监听ID为<code>throttle</code>元素的滚动事件。<br> 当<code>canRun</code>为<code>true</code>，则代表现在的滚动处理事件是空闲的，可以使用。<br> 通过关卡<code>if(!canRun)</code>，等于就拿到了通行证。然后下一步的操作就是立马将关卡关上<code>canRun=false</code>。这样，其他请求执行滚动事件的方法，就被挡回去了。<br> 接着用<code>setTimeout</code>规定最小的时间间隔300，接着再执行<code>setTimeout</code>方法体里面的内容。<br> 最后，等<code>setTimeout</code>里面的方法都执行完毕，才释放关卡<code>canRun=true</code>，允许下一个访问者进来。</p>
</blockquote>
<p> 这个函数节流的实现形式，需要注意的是执行的间隔时间是<code>&gt;=300ms</code>。如果具体执行的方法是包含<code>callback</code>的，也可以将<code>canRun=true</code>这一步放到<code>callback</code>中。理解了函数节流的关卡设置重点，其实改起来就简单多了。</p>
<h2 id="三、函数防抖"><a href="#三、函数防抖" class="headerlink" title="三、函数防抖"></a>三、函数防抖</h2><p> 函数防抖的应用场景，最常见的就是用户注册时候的手机号码验证和邮箱验证了。只有等用户输入完毕后，前端才需要检查格式是否正确，如果不正确，再弹出提示语。以下还是以页面元素滚动监听的例子，来进行解析：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数防抖</span></div><div class="line"><span class="keyword">var</span> timer = <span class="literal">false</span>;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"debounce"</span>).onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	clearTimeout(timer); <span class="comment">// 清除未执行的代码，重置回初始化状态</span></div><div class="line"></div><div class="line">	timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"函数防抖"</span>);</div><div class="line">	&#125;, <span class="number">300</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p> 函数防抖的要点，也是需要一个<code>setTimeout</code>来辅助实现。延迟执行需要跑的代码。<br> 如果方法多次触发，则把上次记录的延迟执行代码用<code>clearTimeout</code>清掉，重新开始。<br> 如果计时完毕，没有方法进来访问触发，则执行代码。</p>
<blockquote>
<p> 这个方法的作用是监听ID为<code>debounce</code>元素的滚动事件<br> 进入滚动事件方法体的时候，做的第一件事就是清除上次未执行的<code>setTimeout</code>。而<code>setTimeout</code>的引用id由变量<code>timer</code>记录。<br> <code>clearTimeout</code>方法，允许传入无效的值。所以这里直接执行<code>clearTimeout</code>即可。<br> 然后，将需要执行的代码放入<code>setTimeout</code>中，再返回<code>setTimeout</code>引用给timer缓存。<br> 如果倒计时<code>300ms</code>以后，还没有新的方法触发滚动事件，则执行<code>setTimeout</code>中的代码。</p>
</blockquote>
<p> 函数防抖的实现重点，就是巧用<code>setTimeout</code>做缓存池，而且可以轻易地清除待执行的代码。<br> 其实，用队列的方式也可以做到这种效果。这里就不深入了。</p>
<h2 id="四、在线demo"><a href="#四、在线demo" class="headerlink" title="四、在线demo"></a>四、在线demo</h2><p><img src="http://upload-images.jianshu.io/upload_images/4118463-3b282a8aa813070b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="函数节流和函数防抖"></p>
<p> 这是我写的一个测试demo，把鼠标移动到模块上方，滚动滚轮，即可在控制台查看输出效果。</p>
<p> <a href="https://wall-wxk.github.io/blogDemo/2017/02/15/throttleAndDebounce.html">demo地址</a>：<code>https://wall-wxk.github.io/blogDemo/2017/02/15/throttleAndDebounce.html</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、概念解释&quot;&gt;&lt;a href=&quot;#一、概念解释&quot; class=&quot;headerlink&quot; title=&quot;一、概念解释&quot;&gt;&lt;/a&gt;一、概念解释&lt;/h2&gt;&lt;p&gt; 函数节流和函数防抖，两者都是优化高频率执行js代码的一种手段。&lt;br&gt; 大家大概都知道旧款电视机的工作原理
    
    </summary>
    
      <category term="JavaScript" scheme="https://wall-wxk.github.io/categories/JavaScript/"/>
    
    
      <category term="throttle" scheme="https://wall-wxk.github.io/tags/throttle/"/>
    
      <category term="debounce" scheme="https://wall-wxk.github.io/tags/debounce/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript嗅探执行神器-sniffer.js，你值得拥有！</title>
    <link href="https://wall-wxk.github.io/2017/02/14/sniffer/"/>
    <id>https://wall-wxk.github.io/2017/02/14/sniffer/</id>
    <published>2017-02-13T16:29:16.000Z</published>
    <updated>2017-02-18T15:47:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、热身——先看实战代码"><a href="#一、热身——先看实战代码" class="headerlink" title="一、热身——先看实战代码"></a>一、热身——先看实战代码</h2><blockquote>
<p>a.js 文件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义Wall及内部方法</span></div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">window, FUNC, undefined</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> name = <span class="string">'wall'</span>;</div><div class="line"></div><div class="line">	Wall.say = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'I\'m '</span>+ name +<span class="string">' !'</span>);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	Wall.message = &#123;</div><div class="line">		<span class="attr">getName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> name;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">setName</span> : <span class="function"><span class="keyword">function</span>(<span class="params">firstName, secondName</span>)</span>&#123;</div><div class="line">			name = firstName+<span class="string">'-'</span>+secondName;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">window</span>.Wall || (<span class="built_in">window</span>.Wall = &#123;&#125;));</div></pre></td></tr></table></figure>
<blockquote>
<p>index.jsp文件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">'text/javascript'</span>&gt;</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span></div><div class="line">		// <span class="attr">Java</span> 代码直出 <span class="attr">js</span></div><div class="line">		<span class="attr">out.print</span>("<span class="attr">Sniffer.run</span>(&#123;'<span class="attr">base</span>'<span class="attr">:window</span>,'<span class="attr">name</span>'<span class="attr">:</span>'<span class="attr">Wall.say</span>','<span class="attr">subscribe</span>'<span class="attr">:true</span>&#125;, '<span class="attr">wall</span>');\<span class="attr">n</span>");</div><div class="line">	%&gt;</div><div class="line"></div><div class="line">	// Lab.js是一个文件加载工具</div><div class="line">	// 依赖的a.js加载完毕后，则可执行缓存的js方法</div><div class="line">	$LAB.script("a.js").wait(function()&#123;</div><div class="line">		// 触发已订阅的方法</div><div class="line">		Sniffer.trigger(&#123;</div><div class="line">			'base':window,</div><div class="line">			'name':'Wall.say'</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 这样，不管a.js文件多大，<code>Wall.say(&#39;wall&#39;)</code>都可以等到文件真正加载完后，再执行。</p>
<h2 id="二、工具简介"><a href="#二、工具简介" class="headerlink" title="二、工具简介"></a>二、工具简介</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 执行 Wall.message.setName('wang', 'wall');</span></div><div class="line">Sniffer.run(&#123;</div><div class="line">	<span class="string">'base'</span>:Wall,</div><div class="line">	<span class="string">'name'</span>:<span class="string">'message.setName'</span>,</div><div class="line">	<span class="string">'subscribe'</span>:<span class="literal">true</span></div><div class="line">&#125;, <span class="string">'wang'</span>, <span class="string">'wall'</span>);</div></pre></td></tr></table></figure>
<p> 看这个执行代码，你也许会感觉困惑-什么鬼！</p>
<p> sniffer.js作用就是可以试探执行方法，如果不可执行，也不会抛错。</p>
<p> 比如例子<code>Wall.message.setName(&#39;wang&#39;, &#39;wall&#39;);</code><br> 如果该方法所在文件还没有加载，也不会报错。<br> 处理的逻辑就是先缓存起来，等方法加载好后，再进行调用。</p>
<p> 再次调用的方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 触发已订阅的方法</span></div><div class="line">Sniffer.trigger(&#123;</div><div class="line">	<span class="string">'base'</span>:Wall,</div><div class="line">	<span class="string">'name'</span>:<span class="string">'message.setName'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> <a href="https://wall-wxk.github.io/blogDemo/2017/02/13/sniffer.html">在线demo</a>:<code>https://wall-wxk.github.io/blogDemo/2017/02/13/sniffer.html</code> (需要在控制台看，建议用pc)</p>
<p> 说起这个工具的诞生，是因为公司业务的需要，自己写的一个工具。<br> 因为公司的后台语言是java，喜欢用jsp的out.print()方法，直接输出一些js方法给客户端执行。<br> 这就存在一个矛盾点，有时候js文件还没下载好，后台输出的语句已经开始调用方法，这就很尴尬。</p>
<p> 所以，这个<strong>工具的作用有两点</strong>：</p>
<p> 1. 检测执行的js方法是否存在，存在则立即执行。<br> 2. 缓存暂时不存在的js方法，等真正可执行的时候，再从缓存队列里面拿出来，触发执行。</p>
<h2 id="三、嗅探核心基础——运算符in"><a href="#三、嗅探核心基础——运算符in" class="headerlink" title="三、嗅探核心基础——运算符in"></a>三、嗅探核心基础——运算符<code>in</code></h2><p> 方法是通过使用运算符<code>in</code>去遍历命名空间中的方法，如果取得到值，则代表可执行。反之，则代表不可执行。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-204345c78931e181.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运算符 in"></p>
<p> 通过这个例子，就可以知道这个sniffer.js的嗅探原理了。</p>
<h2 id="四、抽象出嗅探方法"><a href="#四、抽象出嗅探方法" class="headerlink" title="四、抽象出嗅探方法"></a>四、抽象出嗅探方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* @function &#123;private&#125; 检测方法是否可用</div><div class="line">* @param &#123;string&#125; funcName -- 方法名***.***.***</div><div class="line">* @param &#123;object&#125; base -- 方法所依附的对象 </div><div class="line">**/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkMethod</span>(<span class="params">funcName, base</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> methodList = funcName.split(<span class="string">'.'</span>), <span class="comment">// 方法名list</span></div><div class="line">		readyFunc = base, <span class="comment">// 检测合格的函数部分</span></div><div class="line">		result = &#123;</div><div class="line">			<span class="string">'success'</span>:<span class="literal">true</span>,</div><div class="line">			<span class="string">'func'</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">		&#125;, <span class="comment">// 返回的检测结果</span></div><div class="line">		methodName, <span class="comment">// 单个方法名</span></div><div class="line">		i;</div><div class="line">		</div><div class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; methodList.length; i++)&#123;</div><div class="line">		methodName = methodList[i];</div><div class="line">		<span class="keyword">if</span>(methodName <span class="keyword">in</span> readyFunc)&#123;</div><div class="line">			readyFunc = readyFunc[methodName];</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			result.success = <span class="literal">false</span>;</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	result.func = readyFunc;</div><div class="line">	<span class="keyword">return</span> result; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 像<code>Wall.message.setName(&#39;wang&#39;, &#39;wall&#39;);</code>这样的方法，要判断是否可执行，需要执行以下步骤：<br> 1. 判断<code>Wall</code>是否存在<code>window</code>中。<br> 2. <code>Wall</code>存在，则继续判断<code>message</code>是否在<code>Wall</code>中。<br> 3. <code>message</code>存在，则继续判断<code>setName</code>是否在<code>message</code>中<br> 4. 最后，都判断存在了，则代表可执行。如果中间的任意一个检测不通过，则方法不可执行。</p>
<h2 id="五、实现缓存"><a href="#五、实现缓存" class="headerlink" title="五、实现缓存"></a>五、实现缓存</h2><p> 缓存使用闭包实现的。以队列的性质，存储在<code>list</code>中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">FUN, undefined</span>)</span>&#123;</div><div class="line"><span class="meta">	'use strict'</span></div><div class="line"></div><div class="line">	<span class="keyword">var</span> list = []; <span class="comment">// 存储订阅的需要调用的方法</span></div><div class="line"></div><div class="line">	<span class="comment">// 执行方法</span></div><div class="line">	FUN.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// 很多代码...</span></div><div class="line">		</div><div class="line">		<span class="comment">//将订阅的函数缓存起来</span></div><div class="line">		list.push(...);</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">&#125;)(<span class="built_in">window</span>.Sniffer || (<span class="built_in">window</span>.Sniffer = &#123;&#125;));</div></pre></td></tr></table></figure>
<h2 id="六、确定队列中单个项的内容"><a href="#六、确定队列中单个项的内容" class="headerlink" title="六、确定队列中单个项的内容"></a>六、确定队列中单个项的内容</h2><p> <strong>1. 指定检测的基点 base</strong><br> 由于运算符<code>in</code>工作时，需要几个基点给它检测。所以第一个要有的项就是<code>base</code></p>
<p> <strong>2. 检测的字符类型的方法名 name</strong><br> 像<code>Wall.message.setName(&#39;wang&#39;, &#39;wall&#39;);</code>，如果已经指定基点<code>{&#39;base&#39;:Wall}</code>，则还需要<code>message.setName</code>。所以要存储<code>message.setName</code>，也即<code>{&#39;base&#39;:Wall, &#39;name&#39;:&#39;message.setName&#39;}</code></p>
<p> <strong>3. 缓存方法的参数 args</strong><br> 像<code>Wall.message.setName(&#39;wang&#39;, &#39;wall&#39;);</code>，有两个参数<code>(&#39;wang&#39;, &#39;wall&#39;)</code>，所以需要存储起来。也即<code>{&#39;base&#39;:Wall, &#39;name&#39;:&#39;message.setName&#39;, &#39;args&#39;:[&#39;wang&#39;, &#39;wall&#39;]}</code>。</p>
<p> 为什么参数使用数组缓存起来，是因为方法的参数是变化的，所以后续的代码需要<code>apply</code>去做触发。同理，这里的参数就需要用数组进行缓存</p>
<p> 所以，缓存队列的单个项内容如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">'base'</span>:Wall,</div><div class="line">	<span class="string">'name'</span>:<span class="string">'message.setName'</span>,</div><div class="line">	<span class="string">'args'</span>:[<span class="string">'wang'</span>, <span class="string">'wall'</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="七、实现run方法"><a href="#七、实现run方法" class="headerlink" title="七、实现run方法"></a>七、实现run方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">FUN, undefined</span>)</span>&#123;</div><div class="line"><span class="meta">	'use strict'</span></div><div class="line"></div><div class="line">	<span class="keyword">var</span> list = []; <span class="comment">// 存储订阅的需要调用的方法</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* @function 函数转换接口，用于判断函数是否存在命名空间中，有则调用，无则不调用</div><div class="line">	* @version &#123;create&#125; 2015-11-30</div><div class="line">	* @description</div><div class="line">	*		用途：只设计用于延迟加载</div><div class="line">	*		示例：Wall.mytext.init(45, false);</div><div class="line">	*		调用：Sniffer.run(&#123;'base':window, 'name':'Wall.mytext.init'&#125;, 45, false);</div><div class="line">				或 Sniffer.run(&#123;'base':Wall, 'name':'mytext.init'&#125;, 45, false);</div><div class="line">	*		如果不知道参数的个数，不能直接写，可以用apply的方式调用当前方法</div><div class="line">	*		示例:  Sniffer.run.apply(window, [ &#123;'name':'Wall.mytext.init'&#125;, 45, false ]);</div><div class="line">	**/</div><div class="line">	FUN.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">arguments</span>.length &lt; <span class="number">1</span> || <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>] != <span class="string">'object'</span>)&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Sniffer.run 参数错误'</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">var</span> name = <span class="built_in">arguments</span>[<span class="number">0</span>].name, <span class="comment">// 函数名 0位为Object类型，方便做扩展</span></div><div class="line">			subscribe = <span class="built_in">arguments</span>[<span class="number">0</span>].subscribe || <span class="literal">false</span>, <span class="comment">// 订阅当函数可执行时，调用该函数, true:订阅; false:不订阅</span></div><div class="line">			prompt = <span class="built_in">arguments</span>[<span class="number">0</span>].prompt || <span class="literal">false</span>, <span class="comment">// 是否显示提示语(当函数未能执行的时候)</span></div><div class="line">			promptMsg = <span class="built_in">arguments</span>[<span class="number">0</span>].promptMsg || <span class="string">'功能还在加载中，请稍候'</span>, <span class="comment">// 函数未能执行提示语</span></div><div class="line">			base = <span class="built_in">arguments</span>[<span class="number">0</span>].base || <span class="built_in">window</span>, <span class="comment">// 基准对象，函数查找的起点</span></div><div class="line">			</div><div class="line">			args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>), <span class="comment">// 参数列表</span></div><div class="line">			funcArgs = args.slice(<span class="number">1</span>), <span class="comment">// 函数的参数列表</span></div><div class="line">			callbackFunc = &#123;&#125;, <span class="comment">// 临时存放需要回调的函数</span></div><div class="line">			result; <span class="comment">// 检测结果</span></div><div class="line"></div><div class="line">		result = checkMethod(name, base);</div><div class="line">		<span class="keyword">if</span>(result.success)&#123;</div><div class="line">			subscribe = <span class="literal">false</span>;</div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">				<span class="keyword">return</span> result.func.apply(result.func, funcArgs); <span class="comment">// apply调整函数的指针指向</span></div><div class="line">			&#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">				(<span class="keyword">typeof</span> <span class="built_in">console</span> != <span class="string">'undefined'</span>) &amp;&amp; <span class="built_in">console</span>.log &amp;&amp; <span class="built_in">console</span>.log(<span class="string">'错误:name='</span>+ e.name +<span class="string">'; message='</span>+ e.message);</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">if</span>(prompt)&#123;</div><div class="line">				<span class="comment">// 输出提示语到页面，代码略</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//将订阅的函数缓存起来</span></div><div class="line">		<span class="keyword">if</span>(subscribe)&#123;</div><div class="line">			callbackFunc.name = name;</div><div class="line">			callbackFunc.base = base;</div><div class="line">			callbackFunc.args = funcArgs;</div><div class="line">			list.push(callbackFunc);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">// 嗅探方法</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">checkMethod</span>(<span class="params">funcName, base</span>)</span>&#123;</div><div class="line">		<span class="comment">// 代码...</span></div><div class="line">	&#125;</div><div class="line">&#125;)(<span class="built_in">window</span>.Sniffer || (<span class="built_in">window</span>.Sniffer = &#123;&#125;));</div></pre></td></tr></table></figure>
<p> run方法的作用是：检测方法是否可执行，可执行，则执行。不可执行，则根据传入的参数，决定要不要缓存。</p>
<p> 这个run方法的重点，是<strong>妙用<code>arguments</code>，实现0-n个参数自由传入</strong>。</p>
<blockquote>
<p> 第一个形参<code>arguments[0]</code>，固定是用来传入配置项的。存储要检测的基点<code>base</code>，方法字符串<code>argument[0].name</code>以及缓存标志<code>arguments[0].subscribe</code>。</p>
</blockquote>
<p> </p>
<blockquote>
<p> 第二个形参到第n个形参，则由方法调用者传入需要使用的参数。</p>
<p> 利用泛型方法，将<code>arguments</code>转换为真正的数组。（<code>args = Array.prototype.slice.call(arguments)</code>）<br> 然后，切割出方法调用需要用到的参数。（<code>funcArgs = args.slice(1)</code>）</p>
</blockquote>
<p> run方法的arguments处理完毕后，就可以调用<code>checkMethod</code>方法进行嗅探。</p>
<p> <strong>根据嗅探的结果，分两种情况</strong>：</p>
<blockquote>
<p> 嗅探结果为可执行，则调用apply执行<br> <code>return result.func.apply(result.func, funcArgs);</code></p>
</blockquote>
<p> 这里的重点是必须制定作用域为<code>result.func</code>，也即例子的<code>Wall.message.setName</code>。<br> 这样，如果方法中使用了<code>this</code>，指向也不会发生改变。</p>
<p> 使用<code>return</code>，是因为一些方法执行后是有返回值的，所以这里需要加上<code>return</code>，将返回值传递出去。</p>
<blockquote>
<p> 嗅探结果为不可执行，则根据传入的配置值<code>subscribe</code>，决定是否缓存到队列<code>list</code>中。<br> 需要缓存，则拼接好队列单个项，push进list。</p>
</blockquote>
<h2 id="八、实现trigger方法"><a href="#八、实现trigger方法" class="headerlink" title="八、实现trigger方法"></a>八、实现trigger方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">FUN, undefined</span>)</span>&#123;</div><div class="line"><span class="meta">	'use strict'</span></div><div class="line"></div><div class="line">	<span class="keyword">var</span> list = []; <span class="comment">// 存储订阅的需要调用的方法</span></div><div class="line"></div><div class="line">	<span class="comment">// 执行方法</span></div><div class="line">	FUN.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// 代码...</span></div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	* @function 触发函数接口，调用已提前订阅的函数</div><div class="line">	* @param &#123;object&#125; option -- 需要调用的相关参数</div><div class="line">	* @description</div><div class="line">	*		用途：只设计用于延迟加载</div><div class="line">	*		另外，调用trigger方法的前提是，订阅方法所在js已经加载并解析完毕</div><div class="line">	*		不管触发成功与否，都会清除list中对应的项</div><div class="line">	**/</div><div class="line">	FUN.trigger = <span class="function"><span class="keyword">function</span>(<span class="params">option</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">typeof</span> option !== <span class="string">'object'</span>)&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Sniffer.trigger 参数错误'</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">var</span> funcName = option.name || <span class="string">''</span>, <span class="comment">// 函数名</span></div><div class="line">			base = option.base || <span class="built_in">window</span>, <span class="comment">// 基准对象，函数查找的起点</span></div><div class="line">			newList = [], <span class="comment">// 用于更新list</span></div><div class="line">			result, <span class="comment">// 检测结果</span></div><div class="line">			func, <span class="comment">// 存储执行方法的指针</span></div><div class="line">			i, <span class="comment">// 遍历list</span></div><div class="line">			param; <span class="comment">// 临时存储list[i]</span></div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(funcName.length &lt; <span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">// 遍历list，执行对应的函数，并将其从缓存池list中删除</span></div><div class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</div><div class="line">			param = list[i];</div><div class="line">			<span class="keyword">if</span>(param.name == funcName)&#123;</div><div class="line">				result = checkMethod(funcName, base);</div><div class="line">				<span class="keyword">if</span>( result.success )&#123;</div><div class="line">					<span class="keyword">try</span>&#123;</div><div class="line">						result.func.apply(result.func, param.args);</div><div class="line">					&#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">						(<span class="keyword">typeof</span> <span class="built_in">console</span> != <span class="string">'undefined'</span>) &amp;&amp; <span class="built_in">console</span>.log &amp;&amp; <span class="built_in">console</span>.log(<span class="string">'错误:name='</span>+ e.name +<span class="string">'; message='</span>+ e.message);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				newList.push(param);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		list = newList;</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">// 嗅探方法</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">checkMethod</span>(<span class="params">funcName, base</span>)</span>&#123;</div><div class="line">		<span class="comment">// 代码...</span></div><div class="line">	&#125;</div><div class="line">&#125;)(<span class="built_in">window</span>.Sniffer || (<span class="built_in">window</span>.Sniffer = &#123;&#125;));</div></pre></td></tr></table></figure>
<p> 如果前面的<code>run</code>方法看懂了，<code>trigger</code>方法也就不难理解了。</p>
<blockquote>
<p> 1. 首先要告知<code>trigger</code>方法，需要从队列<code>list</code>中拿出哪个方法执行。<br> 2. 在执行方法之前，需要再次嗅探这个方法是否已经存在。存在了，才可以执行。否则，则可以认为方法已经不存在，可以从缓存中移除。</p>
</blockquote>
<hr>
<h2 id="九、实用性和可靠度"><a href="#九、实用性和可靠度" class="headerlink" title="九、实用性和可靠度"></a>九、实用性和可靠度</h2><p> 实用性这方面是毋容置疑的，不管是什么代码栈，Sniffer.js都值得你拥有！</p>
<p> 可靠度方面，Sniffer.js使用在高流量的公司产品上，至今没有出现反馈任何兼容、或者性能问题。这方面也可以打包票！</p>
<p> 最后，附上<a href="https://github.com/wall-wxk/sniffer/blob/master/sniffer.js" target="_blank" rel="external">源码地址</a>:<code>https://github.com/wall-wxk/sniffer/blob/master/sniffer.js</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、热身——先看实战代码&quot;&gt;&lt;a href=&quot;#一、热身——先看实战代码&quot; class=&quot;headerlink&quot; title=&quot;一、热身——先看实战代码&quot;&gt;&lt;/a&gt;一、热身——先看实战代码&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;a.js 文件&lt;/p&gt;
&lt;/blo
    
    </summary>
    
      <category term="小作品" scheme="https://wall-wxk.github.io/categories/%E5%B0%8F%E4%BD%9C%E5%93%81/"/>
    
    
      <category term="JavaScript" scheme="https://wall-wxk.github.io/tags/JavaScript/"/>
    
      <category term="sniffer.js" scheme="https://wall-wxk.github.io/tags/sniffer-js/"/>
    
  </entry>
  
  <entry>
    <title>javascript模块化编程-详解立即执行函数表达式IIFE</title>
    <link href="https://wall-wxk.github.io/2017/02/13/moduleJs-IIFE/"/>
    <id>https://wall-wxk.github.io/2017/02/13/moduleJs-IIFE/</id>
    <published>2017-02-12T16:46:14.000Z</published>
    <updated>2017-02-18T15:47:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、IIFE解释"><a href="#一、IIFE解释" class="headerlink" title="一、IIFE解释"></a>一、IIFE解释</h2><blockquote>
<p>全拼Imdiately Invoked Function Expression，立即执行的函数表达式。</p>
</blockquote>
<p> 像如下的代码所示，就是一个匿名立即执行函数:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line">  <span class="comment">// 代码...	</span></div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<h2 id="二、括号的意义"><a href="#二、括号的意义" class="headerlink" title="二、括号的意义"></a>二、括号的意义</h2><p> <strong>2.1 包住<code>function(){}</code>的括号的意义</strong></p>
<p> 这个括号的目的，是为了把<code>function(){}</code>转化为表达式。像一些库的源码，喜欢用如下方式代替:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// 代码...</span></div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<p>或者这种方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// 代码...</span></div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<p> 其实，作用都一样，都是把<code>function(){}</code>转化成一个可执行的表达式，方便执行。<br> 如果去掉该括号，则会报错。因为单纯的<code>function(){}</code>不是可执行的表达式，会直接报错。如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-5d8a86acafb1c800.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> <strong>2.1 第二个括号的意义</strong></p>
<p> 理解了第一个括号的意义，第二个括号就很简单了，就是执行表达式了。</p>
<h2 id="三、参数的意义"><a href="#三、参数的意义" class="headerlink" title="三、参数的意义"></a>三、参数的意义</h2><p> 以这段代码为例子，讲解参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wall = &#123;&#125;;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, WALL, undefined</span>)</span>&#123;</div><div class="line">	</div><div class="line">&#125;)(<span class="built_in">window</span>, wall);</div></pre></td></tr></table></figure>
<p> 参数分为形参和实参。<br> <code>function(window, WALL, undefined)</code>三个参数为形参，第二个括号<code>(window, wall)</code>的两个参数为实参。<br> 也即可以理解为 <code>window == window</code>，<code>wall == WALL</code>。</p>
<p> <strong>2.1 普通形参</strong></p>
<p> 普通形参是指由<code>window</code>和<code>wall</code>这样的实际变量传入指定，可以为任何类型的变量。一个形参就对应一个实参</p>
<p> <strong>2.2 特殊形参undefined</strong></p>
<p> 为什么形参要多写一个undefined，这是一个很有趣的话题。<br> 可以知道这个示例，实参只有两个，而形参有三个。所以在函数执行的时候，形参<code>undefined</code>会默认赋值为undefined。</p>
<p> 形参<code>undefined</code>的作用如下：</p>
<p> <strong>2.2.1 防止特殊值undefined被恶意代码篡改。</strong><br> IE6等低版本浏览器，undefined是支持被修改的。而这个特殊值被修改后，像以下这种判断就失效了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(wall == <span class="literal">undefined</span>)&#123;</div><div class="line">  <span class="comment">// 代码...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 所以，这里多加一个形参的目的就是为了防止这种情况发生。只要在这个IIFE作用域内，undefined就能够正常获取到。</p>
<p> <strong>2.2.2 压缩代码可以压缩undefined</strong><br> 因为undefined作为形参，像YUI compressor这种类型的代码压缩工具，可以将其相关的值进行压缩，减小文件的体积。</p>
<h2 id="四、写法解析"><a href="#四、写法解析" class="headerlink" title="四、写法解析"></a>四、写法解析</h2><p> <strong>4.1 普通写法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wall = &#123;&#125;; <span class="comment">// 声明定义一个命名空间wall</span></div><div class="line"></div><div class="line"><span class="comment">// 定义方法</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, WALL, undefined</span>)</span>&#123;</div><div class="line">	<span class="comment">// 给wall命名空间绑定方法say</span></div><div class="line">	WALL.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">	&#125;;</div><div class="line">&#125;)(<span class="built_in">window</span>, wall);</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, WALL, undefined</span>)</span>&#123;</div><div class="line">	<span class="comment">// 给wall命名空间绑定方法 whoIam</span></div><div class="line">	WALL.whoIam = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'wall'</span>);</div><div class="line">	&#125;;</div><div class="line">&#125;)(<span class="built_in">window</span>, wall);</div><div class="line"></div><div class="line"><span class="comment">// 调用</span></div><div class="line">wall.say();</div><div class="line">wall.whoIam();</div></pre></td></tr></table></figure>
<p> 先定义一个命名空间，然后再给这个命名空间加东西。这是最普遍的写法，也是最好理解的。<br> 不足的地方就是必须先声明一个命名空间，然后才能执行相关的绑定代码。存在顺序加载的问题。</p>
<p> <strong>4.2 放大模式</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wall = (<span class="function"><span class="keyword">function</span>(<span class="params">window, WALL, undefined</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> WALL == <span class="string">'undefined'</span>)&#123;</div><div class="line">		WALL = &#123;&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 给wall命名空间绑定方法say</span></div><div class="line">	WALL.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> WALL; <span class="comment">// 返回引用</span></div><div class="line">&#125;)(<span class="built_in">window</span>, wall);</div><div class="line"></div><div class="line"><span class="keyword">var</span> wall = (<span class="function"><span class="keyword">function</span>(<span class="params">window, WALL, undefined</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> WALL == <span class="string">'undefined'</span>)&#123;</div><div class="line">		WALL = &#123;&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 给wall命名空间绑定方法 whoIam</span></div><div class="line">	WALL.whoIam = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'wall'</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> WALL; <span class="comment">// 返回引用</span></div><div class="line">&#125;)(<span class="built_in">window</span>, wall);</div><div class="line"></div><div class="line"><span class="comment">// 调用</span></div><div class="line">wall.say();</div><div class="line">wall.whoIam();</div></pre></td></tr></table></figure>
<p> 放大模式的好处就是，可以不用考虑代码加载的先后顺序。<br> 因为js允许<code>wall</code>变量进行重复var声明，所以这段代码是可以执行的。<br> 我可以把IIFE函数拆分成多个文件进行加载，而不会出现普通写法需要注意的问题。</p>
<p> <strong>需要注意的点</strong>：<br> 1.IIFE的头部，都要先进行检查命名空间是否已经实例化，如果还没实例化，则进行实例化。<br> 2.IIFE的尾部，都要return命名空间的引用，使后续代码能够得到最新的<code>wall</code>命名空间内容。</p>
<p> <strong>4.3 宽放大模式</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, WALL, undefined</span>)</span>&#123;</div><div class="line">	<span class="comment">// 给wall命名空间绑定方法say</span></div><div class="line">	WALL.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">window</span>.wall || (<span class="built_in">window</span>.wall = &#123;&#125;));</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, WALL, undefined</span>)</span>&#123;</div><div class="line">	<span class="comment">// 给wall命名空间绑定方法 whoIam</span></div><div class="line">	WALL.whoIam = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'wall'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">window</span>.wall || (<span class="built_in">window</span>.wall = &#123;&#125;));</div><div class="line"></div><div class="line"><span class="comment">// 调用</span></div><div class="line">wall.say();</div><div class="line">wall.whoIam();</div></pre></td></tr></table></figure>
<p> <strong>宽放大模式的重点注意的地方：</strong>就是在实参部分的<code>window.wall || (window.wall = {})</code>。<br> 用||运算符进行取巧。<br> 如果<code>window.wall</code>是已经实例化的，非not defined。则直接返回<code>window.wall</code>的引用，赋值给形参<code>WALL</code>。不会执行||运算符后面的内容。<br> 如果<code>window.wall</code>还未实例化，则进行实例化。这里要注意的点是实例化是一个赋值操作，需要用括号包起来，变成表达式去执行，才不会报错。<br> 表达式<code>(window.wall = {})</code>执行完毕后，会返回新对象<code>window.wall</code>的引用。</p>
<p> <strong>宽放大模式的好处：</strong>是可以切割成多个文件进行加载，而不必考虑文件加载的先后顺序，不存在强耦合关系。<br> 当然，如果IIFE里面的方法互相引用，还是存在加载依赖的问题。这个问题可以用加载器Require.js等工具解决，这里就不讨论了。</p>
<h2 id="五、分文件加载IIFE要注意的点"><a href="#五、分文件加载IIFE要注意的点" class="headerlink" title="五、分文件加载IIFE要注意的点"></a>五、分文件加载IIFE要注意的点</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">window, WALL, undefined</span>)</span>&#123;</div><div class="line">	<span class="comment">// 给wall命名空间绑定方法say</span></div><div class="line">	WALL.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">window</span>.wall || (<span class="built_in">window</span>.wall = &#123;&#125;));</div></pre></td></tr></table></figure>
<p> 眼尖的已经看出区别了，就是文件开始的地方，先写上分号<code>;</code>。<br> 这样，多个文件合并的时候，才不会出现收尾相接，代码出现错乱的问题。比如下面这种情况：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js 文件</span></div><div class="line">wall.log()</div><div class="line"></div><div class="line"><span class="comment">// b.js 文件</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, WALL, undefined</span>)</span>&#123;</div><div class="line">	<span class="comment">// 给wall命名空间绑定方法say</span></div><div class="line">	WALL.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">window</span>.wall || (<span class="built_in">window</span>.wall = &#123;&#125;));</div></pre></td></tr></table></figure>
<p> 由于a.js文件的<code>wall.log()</code>少写了分号，跟b.js文件合并后，js就会认为‘wall.log()(…)’是需要这么执行的，结果代码就报错了。</p>
<hr>
<p> 觉得不错的，可以关注<code>模块化</code>这个系列的文章，容我后续码字，敬请期待！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、IIFE解释&quot;&gt;&lt;a href=&quot;#一、IIFE解释&quot; class=&quot;headerlink&quot; title=&quot;一、IIFE解释&quot;&gt;&lt;/a&gt;一、IIFE解释&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;全拼Imdiately Invoked Function Expr
    
    </summary>
    
      <category term="模块化编程" scheme="https://wall-wxk.github.io/categories/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="https://wall-wxk.github.io/tags/JavaScript/"/>
    
      <category term="IIFE" scheme="https://wall-wxk.github.io/tags/IIFE/"/>
    
  </entry>
  
  <entry>
    <title>福利贴-教你如何优雅地科学上网</title>
    <link href="https://wall-wxk.github.io/2017/02/07/gfw/"/>
    <id>https://wall-wxk.github.io/2017/02/07/gfw/</id>
    <published>2017-02-07T14:01:24.000Z</published>
    <updated>2017-02-18T15:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、吐槽"><a href="#一、吐槽" class="headerlink" title="一、吐槽"></a>一、吐槽</h2><p> 在我大天朝做开发，最虐心的就是GFW。平时想上GitHub、Facebook、YouTube，看看外面“资本主义的腐朽”，都不给机会😂😂😂<br> 从最初的特定ip访问Google，到改host文件，再到使用红杏出墙（被封杀），到最后只能自己架设VPN。<br> 最近工信部出个文件，连个人都不能弄VPN了💔<br> 好！吐槽完了，说正事。。。</p>
<h2 id="二、大杀器-Gaotizi"><a href="#二、大杀器-Gaotizi" class="headerlink" title="二、大杀器-Gaotizi"></a>二、大杀器-Gaotizi</h2><p> <a href="https://www.gaotizi.com/download.php" target="_blank" rel="external">Gaotizi</a>是一家目前算正常运营的网站（希望不要被封杀）。它提供了Mac os x、Windows、Android、iphone等多终端软件进行翻墙的服务。这个可比chrome翻墙插件强多了。<br> 以下是网站截图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-44bab2662347be8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="高梯子"></p>
<p> 它提供的服务，直白点说：就是把VPN资源卖给你使用。</p>
<h2 id="三、MAC-使用体验展示"><a href="#三、MAC-使用体验展示" class="headerlink" title="三、MAC 使用体验展示"></a>三、MAC 使用体验展示</h2><p> <strong>3.1 下载软件并安装</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-02584835f1e3416a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> 安装双击打开，可以看到屏幕右上角出现纸飞机图标</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-e9f6f652d12fdbdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> <strong>3.2 配置服务器</strong></p>
<p> 登陆Gaotizi网站，进入产品服务列表，找到购买的服务。我这里是购买了季付计划。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-57c6b3b968057aea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Gaotizi"></p>
<p> 点击二维码按钮，弹出弹窗</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-343d90d6d5e940f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="二维码"></p>
<p> 点击允许，则会自动添加服务器配置信息到shadowsocks。点击确定即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-a5540cadb6ad48dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置信息"></p>
<p> <strong>3.3 激动时刻</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-0f663c63a8e20d70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Google"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-88bda625c48bbc4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub"></p>
<p> 成功访问谷歌、GitHub😆</p>
<h2 id="四、手机翻墙"><a href="#四、手机翻墙" class="headerlink" title="四、手机翻墙"></a>四、手机翻墙</h2><p> 手机翻墙软件，我使用的是Wingy</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-37b0c1845726f607.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Wingy"></p>
<p> 打开Wingy APP，然后点击左上角 + 号，进入以下页面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-956d424d23e77ec6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="扫描二维码"></p>
<p> 然后选择“扫描二维码”，扫一扫Gaotizi提供的二维码，就可以连接上VPN了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-cfba3908bde2af00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> 打开YouTube，妥妥滴~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-b31cd2f057c6011c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="YouTube"></p>
<h2 id="五、收费情况"><a href="#五、收费情况" class="headerlink" title="五、收费情况"></a>五、收费情况</h2><p><img src="http://upload-images.jianshu.io/upload_images/4118463-be4ddc01e36c4568.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="收费情况"></p>
<p> 我选择的是季付计划，30G流量，可以三台设备使用，80块钱，挺值！</p>
<p> 最后，附上<a href="https://www.gaotizi.com" target="_blank" rel="external">传送门</a>：<code>https://www.gaotizi.com</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、吐槽&quot;&gt;&lt;a href=&quot;#一、吐槽&quot; class=&quot;headerlink&quot; title=&quot;一、吐槽&quot;&gt;&lt;/a&gt;一、吐槽&lt;/h2&gt;&lt;p&gt; 在我大天朝做开发，最虐心的就是GFW。平时想上GitHub、Facebook、YouTube，看看外面“资本主义的腐朽”，
    
    </summary>
    
      <category term="其他" scheme="https://wall-wxk.github.io/categories/other/"/>
    
    
      <category term="gfw" scheme="https://wall-wxk.github.io/tags/gfw/"/>
    
  </entry>
  
  <entry>
    <title>微信面试题-获取元素的最终background-color</title>
    <link href="https://wall-wxk.github.io/2017/02/05/wx-backgroundColor/"/>
    <id>https://wall-wxk.github.io/2017/02/05/wx-backgroundColor/</id>
    <published>2017-02-05T15:00:04.000Z</published>
    <updated>2017-02-18T15:47:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p> 用JS代码求出页面上一个元素的最终的background-color，不考虑IE浏览器，不考虑元素float情况。</p>
<h2 id="二、题目解析"><a href="#二、题目解析" class="headerlink" title="二、题目解析"></a>二、题目解析</h2><p> <strong>1.考察底层JavaScript基础</strong><br> 前端开发，日常最常接触的就是页面样式的编写。而摆脱jQuery等工具库，用原生js获取样式，是每个前端程序猿进阶阶段必须掌握的技能。</p>
<p> <strong>2.考察面试者的思维缜密程度和开发经验</strong><br> 如果认为单单求元素计算后的样式，就有点too young了。页面的样式的复杂，永远是最虐心的。就算前端有多牛逼，一听到兼容IE6，论谁都会心塞😓。所以还要考虑特殊的情况：<code>display，opacity，visibility</code>的取值。</p>
<h2 id="三、理论基础"><a href="#三、理论基础" class="headerlink" title="三、理论基础"></a>三、理论基础</h2><p> <strong>1. 内联样式</strong><br> 内联样式可以通过元素的style属性获取，如果style属性有background-color值，则可以直接获取出来 (暂不考虑!important) 。</p>
<p> <strong>2. 外联的层叠样式</strong><br> DOM2样式规范在<code>document.defaultView</code>中包含了一个<code>getComputedStyle()</code>方法。该方法返回一个只读的CSSStyleDeclaration对象，其中包含特定元素的所有计算样式。</p>
<h2 id="四、解题"><a href="#四、解题" class="headerlink" title="四、解题"></a>四、解题</h2><p><strong>4.1 将所有工具方法封装在WDS(wall dom script)命名空间中</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">WDS, undefined</span>)</span>&#123;</div><div class="line">  <span class="comment">// 封装代码...</span></div><div class="line">&#125;)(<span class="built_in">window</span>.WDS || (<span class="built_in">window</span>.WDS = &#123;&#125;));</div></pre></td></tr></table></figure></p>
<p> 代码封装在命名空间里，不会造成无意间的代码污染。</p>
<p><strong>4.2 工具方法camelize</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串转换为驼峰写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/-(\w)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">strMatch, p1</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> p1.toUpperCase();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 该方法是为了方便后续<code>getStyle()</code>方法的编写，而独立出来的。<br> 作用是将连字符类的css属性值，转换成驼峰写法。<br> 例如：将background-color转换为backgroundColor</p>
<p><strong>4.3 获取特定元素的计算样式</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取元素计算后的样式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, property</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(!elem || !property)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> value = elem.style[camelize(property)], <span class="comment">// 先获取是否有内联样式</span></div><div class="line">		css; <span class="comment">// 获取的所有计算样式</span></div><div class="line"></div><div class="line">	<span class="comment">// 无内联样式，则获取层叠样式表计算后的样式</span></div><div class="line">	<span class="keyword">if</span>(!value)&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">document</span>.defaultView &amp;&amp; <span class="built_in">document</span>.defaultView.getComputedStyle)&#123;</div><div class="line">			css = <span class="built_in">document</span>.defaultView.getComputedStyle(elem, <span class="literal">null</span>);</div><div class="line">			value = css ? css.getPropertyValue(property) : <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 做到这一步，第一个考察点基本就满足了。也能获知面试者是否具备足够扎实的js基础。<br> 另外，像安全保护性的判断<code>if(!elem || !property)</code>和功能嗅探<code>if(document.defaultView &amp;&amp; document.defaultView.getComputedStyle)</code>，都能很好地体现开发者的代码逻辑和开发经验。</p>
<p><strong>4.4 排除特殊情况</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 检测获取的背景色是否有效</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkBgValue</span>(<span class="params">elem</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> value = getStyle(elem, <span class="string">'background-color'</span>),</div><div class="line">		hasColor = value ? <span class="literal">true</span> : <span class="literal">false</span>; <span class="comment">// 是否有颜色</span></div><div class="line"></div><div class="line">	<span class="comment">// 排除特殊情况</span></div><div class="line">	<span class="keyword">if</span>(value == <span class="string">"transparent"</span> || value == <span class="string">"rgba(0, 0, 0, 0)"</span>)&#123;</div><div class="line">		<span class="comment">// 未设置background-color，或者设置为跟随父节点</span></div><div class="line">		hasColor = <span class="literal">false</span>;</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(getStyle(elem, <span class="string">'opacity'</span>) == <span class="string">"0"</span>)&#123;</div><div class="line">		<span class="comment">// dom节点透明度为全透明</span></div><div class="line">		hasColor = <span class="literal">false</span>;</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(getStyle(elem, <span class="string">'visibility'</span>) == <span class="string">"hidden"</span>)&#123;</div><div class="line">		<span class="comment">// dom节点不可见</span></div><div class="line">		hasColor = <span class="literal">false</span>;</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(getStyle(elem, <span class="string">'display'</span>) == <span class="string">"none"</span>)&#123;</div><div class="line">		<span class="comment">// dom节点不可见</span></div><div class="line">		hasColor = <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> hasColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>4.5 获取div在页面最终显示的颜色</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取div最终显示的颜色</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRealBg</span>(<span class="params">elem</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(checkBgValue(elem))&#123;</div><div class="line">		<span class="keyword">return</span> getStyle(elem, <span class="string">'background-color'</span>);</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(elem != <span class="built_in">document</span>.documentElement)&#123;</div><div class="line">		<span class="keyword">return</span> getRealBg(elem.parentNode);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 获取样式值采用递归方式处理。<br> 如果能顺利获取到元素样式，且不触发<code>4.4 排除特殊情况</code>中的一种，则直接返回结果。<br> 触发了特殊情况，则需要查找父节点以及更上层的节点的样式，来获取肉眼能看到，显示在页面上的background-color值。<br> 在向上回溯的过程中，如果已经回溯到<code>html</code>根节点，则可以停止回溯。所以加了判断<code>else if(elem != document.documentElement)</code></p>
<h2 id="五、遗漏的大boss"><a href="#五、遗漏的大boss" class="headerlink" title="五、遗漏的大boss"></a>五、遗漏的大boss</h2><p><strong>5.1 大boss !important</strong><br> 如果乱用 <code>!important</code>，对大型项目的维护和开发，绝对是一场噩梦。因为优先级规则的计算，<code>!important</code>永远处在食物链的最顶层。<br> 当前题目不考虑这种情况，也是我的偷懒😆。确实很棘手，就不写这个逻辑分支的代码了。这里提醒一下~</p>
<p><strong>5.2 大boss 父节点及根节点设置了不可见css属性</strong><br> 只要设置该css语句：<code>html {display:none;}</code>，页面所有元素立刻消失不见。而任意特定元素的上级节点，只要设置了 <code>opacity,display,visibility</code>，判断逻辑瞬间变得复杂起来。所以，这个浑水我也不趟 O(∩_∩)O哈哈~</p>
<h2 id="六、改进的点"><a href="#六、改进的点" class="headerlink" title="六、改进的点"></a>六、改进的点</h2><p> 其实特殊情况排除的判断，我偷懒没做到最好——rgb颜色值和特定颜色值(比如red)没有进行统一的转换，只是加了生硬的判断<code>if(value == &quot;transparent&quot; || value == &quot;rgba(0, 0, 0, 0)&quot;)</code>。<br> 有兴趣的可以搜索下颜色值转换的js方法，这里我就不写了。</p>
<h2 id="七、源码和demo"><a href="#七、源码和demo" class="headerlink" title="七、源码和demo"></a>七、源码和demo</h2><p><a href="https://github.com/wall-wxk/blogDemo/blob/master/2017/02/05/getStyle.html" target="_blank" rel="external">源码地址</a>：<code>https://github.com/wall-wxk/blogDemo/blob/master/2017/02/05/getStyle.html</code><br><a href="https://wall-wxk.github.io/blogDemo/2017/02/05/getStyle.html">demo</a>：<code>https://wall-wxk.github.io/blogDemo/2017/02/05/getStyle.html</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-ff57104dab5b90e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p> 谢谢@<a href="http://www.jianshu.com/u/a3187c2973b1" target="_blank" rel="external">烟雨雾岚</a> 的提醒的新思路：canvas截图+Js获取图片某点颜色，这样可以完美解决所有的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、题目&quot;&gt;&lt;a href=&quot;#一、题目&quot; class=&quot;headerlink&quot; title=&quot;一、题目&quot;&gt;&lt;/a&gt;一、题目&lt;/h2&gt;&lt;p&gt; 用JS代码求出页面上一个元素的最终的background-color，不考虑IE浏览器，不考虑元素float情况。&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="https://wall-wxk.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="CSS" scheme="https://wall-wxk.github.io/tags/CSS/"/>
    
      <category term="微信" scheme="https://wall-wxk.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>微信面试题-LazyMan的深入解析和实现</title>
    <link href="https://wall-wxk.github.io/2017/01/22/wx-lazyMan/"/>
    <id>https://wall-wxk.github.io/2017/01/22/wx-lazyMan/</id>
    <published>2017-01-22T14:56:36.000Z</published>
    <updated>2017-02-18T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、题目介绍"><a href="#一、题目介绍" class="headerlink" title="一、题目介绍"></a>一、题目介绍</h2><p> 以下是我copy自网上的面试题原文：</p>
<blockquote>
<p>实现一个LazyMan，可以按照以下方式调用:<br>LazyMan(“Hank”)输出:<br>Hi! This is Hank!<br> <br>LazyMan(“Hank”).sleep(10).eat(“dinner”)输出<br>Hi! This is Hank!<br>//等待10秒..<br>Wake up after 10<br>Eat dinner~<br> <br>LazyMan(“Hank”).eat(“dinner”).eat(“supper”)输出<br>Hi This is Hank!<br>Eat dinner~<br>Eat supper~<br> <br>LazyMan(“Hank”).sleepFirst(5).eat(“supper”)输出<br>//等待5秒<br>Wake up after 5<br>Hi This is Hank!<br>Eat supper<br> <br>以此类推。</p>
</blockquote>
<h2 id="二、题目考察的点"><a href="#二、题目考察的点" class="headerlink" title="二、题目考察的点"></a>二、题目考察的点</h2><p> <strong>先声明：我不是微信员工，考察的点是我推测的，可能不是，哈哈！</strong></p>
<p> 1.方法链式调用<br> 2.类的使用和面向对象编程的思路<br> 3.设计模式的应用<br> 4.代码的解耦<br> 5.最少知识原则，也即 迪米特法则（Law of Demeter）<br> 6.代码的书写结构和命名</p>
<h2 id="三、题目思路解析"><a href="#三、题目思路解析" class="headerlink" title="三、题目思路解析"></a>三、题目思路解析</h2><p> 1.看题目输出示例，可以确定这是拟人化的输出，也就是说：应该编写一个类来定义一类人，叫做LazyMan。可以输出名字、吃饭、睡觉等行为。<br> 2.从输出的句子可以看出，sleepFrist的优先级是最高的，其他行为的优先级一致。<br> 3.从三个例子来看，都得先调用LazyMan来初始化一个人，才能继续后续行为，所以LazyMan是一个接口。<br> 4.句子是按调用方法的次序进行顺序执行的，是一个队列。</p>
<h2 id="四、采用观察者模式实现代码"><a href="#四、采用观察者模式实现代码" class="headerlink" title="四、采用观察者模式实现代码"></a>四、采用观察者模式实现代码</h2><p> <strong>4.1 采用模块模式来编写代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p> <strong>4.2 声明一个变量taskList，用来存储需要队列信息</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> taskList = [];</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p> 队列中，单个项的存储设计为一个json，存储需要触发的消息，以及方法执行时需要的参数列表。比如LazyMan(‘Hank’)，需要的存储信息如下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">'msg'</span>:<span class="string">'LazyMan'</span>,</div><div class="line">	<span class="string">'args'</span>:<span class="string">'Hank'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 当执行LazyMan方法的时候，调用订阅方法，将需要执行的信息存入taskList中，缓存起来。<br> 存储的信息，会先保留着，等发布方法进行提取，执行和输出。</p>
<p> <strong>4.3 订阅方法</strong></p>
<p> 订阅方法的调用方式设计：<code>subscribe(&quot;lazyMan&quot;, &quot;Hank&quot;)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> taskList = [];</div><div class="line"></div><div class="line">	<span class="comment">// 订阅</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> param = &#123;&#125;,</div><div class="line">			args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(args.length &lt; <span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"subscribe 参数不能为空!"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		param.msg = args[<span class="number">0</span>]; <span class="comment">// 消息名</span></div><div class="line">		param.args = args.slice(<span class="number">1</span>); <span class="comment">// 参数列表</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span>(param.msg == <span class="string">"sleepFirst"</span>)&#123;</div><div class="line">			taskList.unshift(param);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			taskList.push(param);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p> 用一个param变量来组织好需要存储的信息，然后push进taskList中，缓存起来。<br> 特别的，如果是sleepFirst，则放置在队列头部。</p>
<p> <strong>4.4 发布方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> taskList = [];</div><div class="line"></div><div class="line">        <span class="comment">// 订阅方法 代码...</span></div><div class="line"></div><div class="line">	<span class="comment">// 发布</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(taskList.length &gt; <span class="number">0</span>)&#123;</div><div class="line">			run(taskList.shift());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p> 将队列中的存储信息读取出来，交给run方法<code>(暂定，后续实现)</code>去执行。这里限定每次发布只执行一个，以维持队列里面的方法可以挨个执行。<br> 另外，这里使用shift()方法的原因是，取出一个，就在队列中删除这一个，避免重复执行。</p>
<p> <strong>4.5 实现LazyMan类</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LazyMan</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line">LazyMan.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">	subscribe(<span class="string">"eat"</span>, str);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">LazyMan.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	subscribe(<span class="string">"sleep"</span>, num);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">LazyMan.prototype.sleepFirst = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	subscribe(<span class="string">"sleepFirst"</span>, num);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p> 将LazyMan类实现，具有eat、sleep、sleepFrist等行为。<br> 触发一次行为，就在taskList中记录一次，并返回当前对象，以支持链式调用。</p>
<p> <strong>4.6 实现输出console.log的包装方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 输出文字</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyManLog</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 为什么还要为console.log包装一层，是因为在实战项目中，产经经常会修改输出提示的UI。如果每一处都用console.log直接调用，那改起来就麻烦很多。<br> 另外，如果要兼容IE等低级版本浏览器，也可以很方便的修改。<br> 也就是DRY原则（Don’t Repeat Youself）。</p>
<p> <strong>4.7 实现具体执行的方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 具体方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyMan</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">	lazyManLog(<span class="string">"Hi!This is "</span>+ str +<span class="string">"!"</span>);</div><div class="line"></div><div class="line">	publish();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">	lazyManLog(<span class="string">"Eat "</span>+ str +<span class="string">"~"</span>);</div><div class="line">	publish();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		lazyManLog(<span class="string">"Wake up after "</span>+ num);</div><div class="line"></div><div class="line">		publish();</div><div class="line">	&#125;, num*<span class="number">1000</span>);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleepFirst</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		lazyManLog(<span class="string">"Wake up after "</span>+ num);</div><div class="line"></div><div class="line">		publish();</div><div class="line">	&#125;, num*<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里的重点是解决setTimeout执行时会延迟调用，也即线程异步执行的问题。只有该方法执行成功后，再发布一次消息<code>publish()</code>，提示可以执行下一个队列信息。否则，就会一直等待。</p>
<p> <strong>4.8 实现run方法，用于识别要调用哪个具体方法，是一个总的控制台</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 鸭子叫</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">option</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> msg = option.msg,</div><div class="line">		args = option.args;</div><div class="line"></div><div class="line">	<span class="keyword">switch</span>(msg)&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">"lazyMan"</span>: lazyMan.apply(<span class="literal">null</span>, args);<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">"eat"</span>: eat.apply(<span class="literal">null</span>, args);<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">"sleep"</span>: sleep.apply(<span class="literal">null</span>,args);<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">"sleepFirst"</span>: sleepFirst.apply(<span class="literal">null</span>,args);<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 这个方法有点像<strong>鸭式辨型接口</strong>，所以注释叫<code>鸭子叫</code>。<br> run方法接收队列中的单个消息，然后读取出来，看消息是什么类型的，然后执行对应的方法。</p>
<p> <strong>4.9 暴露接口LazyMan，让外部可以调用</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line">        <span class="comment">// 很多代码...</span></div><div class="line"></div><div class="line">	<span class="comment">// 暴露接口</span></div><div class="line">	<span class="built_in">window</span>.LazyMan = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">		subscribe(<span class="string">"lazyMan"</span>, str);</div><div class="line"></div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			publish();</div><div class="line">		&#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> LazyMan();</div><div class="line">	&#125;;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure></p>
<p> 接口LazyMan里面的publish方法必须使用setTimeout进行调用。这样能让<code>publish()</code>执行的线程延后，挂起。等链式方法都执行完毕后，线程空闲下来，再执行该<code>publish()</code>。<br> 另外，这是一个对外接口，所以调用的时候，同时也会new 一个新的LazyMan，并返回，以供调用。</p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p> <strong>1. 好处</strong></p>
<p> 使用观察者模式，让代码可以解耦到合理的程度，使后期维护更加方便。<br> 比如我想修改<code>eat</code>方法，我只需要关注<code>eat()</code>和<code>LazyMan.prototype.eat</code>的实现。其他地方，我都可以不用关注。这就符合了<strong>最少知识原则</strong>。</p>
<p> <strong>2. 不足</strong><br> <code>LazyMan.prototype.eat</code>这种方法的参数，其实可以用arguments代替，我没写出来，怕弄得太复杂，就留个优化点吧。<br> 使用了unshift和shift方法，没有考虑到低版本IE浏览器的兼容。</p>
<h2 id="六、完整源码和线上demo"><a href="#六、完整源码和线上demo" class="headerlink" title="六、完整源码和线上demo"></a>六、完整源码和线上demo</h2><p> 完整源码已经放在我的gitHub上</p>
<p> <a href="https://github.com/wall-wxk/blogDemo/blob/master/2017/01/22/lazyMan.html" target="_blank" rel="external">源码入口</a>：<a href="https://github.com/wall-wxk/blogDemo/blob/master/2017/01/22/lazyMan.html" target="_blank" rel="external">https://github.com/wall-wxk/blogDemo/blob/master/2017/01/22/lazyMan.html</a></p>
<p> <a href="https://wall-wxk.github.io/blogDemo/2017/01/22/lazyMan.html">demo访问地址</a>：<a href="https://wall-wxk.github.io/blogDemo/2017/01/22/lazyMan.html">https://wall-wxk.github.io/blogDemo/2017/01/22/lazyMan.html</a></p>
<p> demo需要打开控制台，在控制台中调试代码。</p>
<h2 id="七、番外"><a href="#七、番外" class="headerlink" title="七、番外"></a>七、番外</h2><p> 网上有人也实现了lazyMan，但是实现的方式我不是很喜欢和认同，但是也是一种思路，这里顺便贴出来给大伙看看。<br><a href="http://web.jobbole.com/89626/" target="_blank" rel="external">如何实现一个LazyMan</a>：<a href="http://web.jobbole.com/89626/" target="_blank" rel="external">http://web.jobbole.com/89626/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、题目介绍&quot;&gt;&lt;a href=&quot;#一、题目介绍&quot; class=&quot;headerlink&quot; title=&quot;一、题目介绍&quot;&gt;&lt;/a&gt;一、题目介绍&lt;/h2&gt;&lt;p&gt; 以下是我copy自网上的面试题原文：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实现一个LazyMan，可以
    
    </summary>
    
      <category term="面试题" scheme="https://wall-wxk.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="微信" scheme="https://wall-wxk.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="JavaScript" scheme="https://wall-wxk.github.io/tags/JavaScript/"/>
    
      <category term="lazyMan" scheme="https://wall-wxk.github.io/tags/lazyMan/"/>
    
  </entry>
  
  <entry>
    <title>localStorage的黑科技-js和css缓存机制</title>
    <link href="https://wall-wxk.github.io/2017/01/18/localStorage/"/>
    <id>https://wall-wxk.github.io/2017/01/18/localStorage/</id>
    <published>2017-01-18T12:30:36.000Z</published>
    <updated>2017-02-18T15:27:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、发现黑科技的起因"><a href="#一、发现黑科技的起因" class="headerlink" title="一、发现黑科技的起因"></a>一、发现黑科技的起因</h2><p> 今天在微信公众号看到一篇技术博文，想用印象笔记收藏，所以发送了文章链接到pc上。然后习惯性地打开控制台，看看源码，想了解下最近微信用了什么新技术。<br> 呵呵，以下勾起了我侦探的欲望。页面加载后的异常点就是只加载了一个js，如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-b2ba6f7903ae5373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> 我很诧异，为什么已经开启了Disable cache，js只加载了一个，而且体积这么小。接着，我按住Ctrl+O进行资源文件查找，发现我被“忽悠”了。其实根本就不止一个js文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-270d5d850ce777c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> 脑袋里灵光一闪，不会是用localStorage做了缓存吧？！赶紧看了下localStronge,还真是。。。。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-6b1244b5dbf8fcac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> 心里一阵澎湃，这不是我之前就想实现的加载性能优化的想法吗！乖乖，我孤陋寡闻了，已经有前端团队实现了代码。</p>
<h2 id="二、谈谈文件加载方面的优化思路"><a href="#二、谈谈文件加载方面的优化思路" class="headerlink" title="二、谈谈文件加载方面的优化思路"></a>二、谈谈文件加载方面的优化思路</h2><p> 通常，前端的资源文件加载优化，就是在文件不修改迭代的情况下，尽可能多地利用缓存，避免多次下载同样的文件。<br> 一般的做法就是尽量延长资源的有效期，也就是设置 Cache-Control里的max-age，使页面资源请求的返回码为304，让浏览器直接使用本地缓存。<br> 虽然pc端的协商缓存（304）很快，但手机端因为网络原因，协商缓存的效果就没pc端那么好了。而且，手机会经常清除本地缓存，所以文件缓存的时间也不会很长。<br> 这个时候，localStorage就派上用场了。<br> localStorage相比cookie，可以缓存大体积的数据，而且是永久有效。所以，如果把js资源和css资源存储在localStorage中，则可以省去发送http请求所消耗的时间，大大提高用户的浏览体验。</p>
<h2 id="三、用localStorage做资源缓存需要解决的问题"><a href="#三、用localStorage做资源缓存需要解决的问题" class="headerlink" title="三、用localStorage做资源缓存需要解决的问题"></a>三、用localStorage做资源缓存需要解决的问题</h2><p><strong>3.1 版本更新机制</strong> </p>
<p> 只要一个项目还在迭代开发，就难以避免需要更新资源文件。<br> 普通的资源请求，可以根据<br> 文件名+md5 <code>http://res.wx.qq.com/mmbizwap/zh_CN/htmledition/js/biz_wap/moon32ebc4.js</code><br>  或者<br> 在资源链接后面加上特定的后缀<code>http://1.ss.faisys.com/js/comm/fai.min.js?v=201612051739</code><br> 做标识来判断是否需要更新资源。<br> 如果用localStorage做，则需要一套新的缓存更新机制。</p>
<p><strong>3.2 搭建更新代码的脚手架</strong></p>
<p> 使用localStorage缓存，则需要一个新的脚手架来管理资源文件的读取和写入。</p>
<p><strong>3.3 后台输出一份资源配置信息</strong></p>
<p> 因为需要前端做资源更新，所以后台要输出一份依据给前端做判断用，也就是需要一份资源配置信息。前端根据配置信息，进行匹配和比较，最终决定 使用localStorage缓存，还是重新发起请求，下载最新的资源文件。</p>
<p><strong>3.4 存在XSS安全隐患</strong></p>
<p> localStorage中的信息，客户端是可以任意修改的。如果哪个黑客想练手一下，可以任意注入js代码。那么，在页面刷新的时候，注入的代码也将会被执行。</p>
<h2 id="四、微信的做法解析"><a href="#四、微信的做法解析" class="headerlink" title="四、微信的做法解析"></a>四、微信的做法解析</h2><p><strong>4.1 版本标识</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-cbf76b763ada7c7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> 以<code>__MOON__a/a_report.js</code>为例，版本信息用key <code>__MOON__a/a_report.js_ver</code>存储，存储的value为<code>//res.wx.qq.com/mmbizwap/zh_CN/htmledition/js/a/a_report32e586.js</code>。<br> 如果按普通加载方式，直接将该value取出来，设置到script节点的src属性，即可完成加载。<br> 微信判断该版本是否最新，就是用该value值与后台输出的配置信息进行比较，最后得出是否更新的结果。<br> 如果value值与配置信息一致，则使用缓存。否则，重新发起请求加载。</p>
<p><strong>4.2 脚手架</strong></p>
<p> 可以看出，微信使用的是自己开发的脚手架moon.js，在这个网页中的实际文件名是<code>moon32ebc4.js</code>。<br> 因为是混淆过变量名的文件，所以要看出具体代码的走向，有点费劲，这里就不做分析了。</p>
<p><strong>4.3 资源配置信息</strong></p>
<p> 因为脚手架moon.js需要资源配置信息才能正常工作，所以配置信息一定会在moon.js之前输出。<br> 依次查看moon.js之前的script标签，发现了<code>window.moon_map</code>这个json对象。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-330ad99b6ad63fca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> 利用控制台输出该变量查看信息如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-da2ca16b1807103d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> 看到这里，可以明确一个点：这就是更新机制所必备的资源配置信息表了。<br> 而且，可以看出，该配置信息json对象的key，就对应localStorage中的key。同理，value值也是一一对应。</p>
<p><strong>4.4 XSS攻击</strong></p>
<p> 此处是为了验证微信的缓存机制是否存在XSS攻击，看到这里的童鞋可千万不要去做坏事。<br> 我在一个js缓存代码中，插入<code>alert(&quot;hehe&quot;);</code>，看页面刷新的时候，是否会出现该弹窗，来验证是否存在攻击漏洞。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-523039c65c00d3f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> 刷新页面后，结果如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-ad6a95f119b4ad16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> 可以看出，微信也没有解决这类问题。所以，这种缓存机制，还是有先天不足的。</p>
<p><strong>4.5 测试微信的更新机制</strong></p>
<p> 修改localStorage中 key <code>__MOON__a/a_report.js_ver</code>对应的value值，让微信的脚手架moon.js更新<code>__MOON__a/a_report.js</code>，刷掉我刚才主动插入的代码。<br> 这里，我修改文件名为<code>***587.js</code>（原来的文件名为<code>***586.js</code>）。接着F5刷新页面。<br> 结果为：report.js代码更新了，版本号也恢复回 <code>***586.js</code>。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4118463-e2278e74c27b7cfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="五、结论"><a href="#五、结论" class="headerlink" title="五、结论"></a>五、结论</h2><p> localStorage缓存有其用武之地，但不是万能的。需要注意以上提及的坑。<br> 可以应用的场景我归纳为以下几点：</p>
<p>  <strong>1. 非首屏渲染需要的css文件，可以做LS缓存。</strong></p>
<p>  首屏渲染需要的css，需要按常规方式输出，因为SEO需要，不然爬虫爬取页面的时候，页面效果会很不好。而非首屏的css，则可以用LS缓存，减少资源下载时间。</p>
<p>  <strong>2. 展示类、动画类等非业务主要逻辑的代码，可以做LS缓存。</strong></p>
<p>  这样，可以一定程度上避免业务层的安全漏洞。当然，前端再怎么做防护都是一层薄纸。重要的，还是后台接口要做好安全保护。</p>
<p>  <strong>3. 移动端可以做LS缓存。PC端做LS缓存，起到的优化作用不大。</strong></p>
<h2 id="六、番外"><a href="#六、番外" class="headerlink" title="六、番外"></a>六、番外</h2><p> 有兴趣的童鞋，还可以看看知乎上大神们的讨论，<a href="https://www.zhihu.com/question/28467444" target="_blank" rel="external">静态资源（JS/CSS）存储在localStorage有什么缺点？为什么没有被广泛应用？ - 互联网 - 知乎</a><br> 另外，腾讯网的前端，在gitHub上有分享其<a href="https://mtjs.github.io/" target="_blank" rel="external">MT 模块管理框架</a>，可以看看具体的实现逻辑。<br> 最后，上一个栗子 —— 线上实例demo：<a href="http://scrat.io/" target="_blank" rel="external">webapp模块化开发体系</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、发现黑科技的起因&quot;&gt;&lt;a href=&quot;#一、发现黑科技的起因&quot; class=&quot;headerlink&quot; title=&quot;一、发现黑科技的起因&quot;&gt;&lt;/a&gt;一、发现黑科技的起因&lt;/h2&gt;&lt;p&gt; 今天在微信公众号看到一篇技术博文，想用印象笔记收藏，所以发送了文章链接到p
    
    </summary>
    
      <category term="JavaScript" scheme="https://wall-wxk.github.io/categories/JavaScript/"/>
    
    
      <category term="微信" scheme="https://wall-wxk.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="localStorage" scheme="https://wall-wxk.github.io/tags/localStorage/"/>
    
  </entry>
  
  <entry>
    <title>动态加载css方法实现和深入解析</title>
    <link href="https://wall-wxk.github.io/2017/01/17/loadCss/"/>
    <id>https://wall-wxk.github.io/2017/01/17/loadCss/</id>
    <published>2017-01-17T14:40:54.000Z</published>
    <updated>2017-02-19T03:09:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、方法引用来源和应用"><a href="#一、方法引用来源和应用" class="headerlink" title="一、方法引用来源和应用"></a>一、方法引用来源和应用</h3><p> 此动态加载css方法 loadCss，剥离自Sea.js，并做了进一步的优化（优化代码后续会进行分析）。<br> 因为公司项目需要用到懒加载来提高网站加载速度，所以将非首屏渲染必需的css文件进行动态加载操作。</p>
<h3 id="二、优化后的完整代码"><a href="#二、优化后的完整代码" class="headerlink" title="二、优化后的完整代码"></a>二、优化后的完整代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* @function 动态加载css文件</div><div class="line">* @param &#123;string&#125; options.url -- css资源路径</div><div class="line">* @param &#123;function&#125; options.callback -- 加载后回调函数</div><div class="line">* @param &#123;string&#125; options.id -- link标签id</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadCss</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> url = options.url,</div><div class="line">		callback = <span class="keyword">typeof</span> options.callback == <span class="string">"function"</span> ? options.callback : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">		id = options.id,</div><div class="line">		node = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>),</div><div class="line">		supportOnload = <span class="string">"onload"</span> <span class="keyword">in</span> node,</div><div class="line">		isOldWebKit = +navigator.userAgent.replace(<span class="regexp">/.*(?:AppleWebKit|AndroidWebKit)\/?(\d+).*/i</span>, <span class="string">"$1"</span>) &lt; <span class="number">536</span>, <span class="comment">// webkit旧内核做特殊处理</span></div><div class="line">		protectNum = <span class="number">300000</span>; <span class="comment">// 阈值10分钟，一秒钟执行pollCss 500次</span></div><div class="line">		</div><div class="line">	node.rel = <span class="string">"stylesheet"</span>;</div><div class="line">    node.type = <span class="string">"text/css"</span>;</div><div class="line">	node.href = url;</div><div class="line">	<span class="keyword">if</span>( <span class="keyword">typeof</span> id !== <span class="string">"undefined"</span> )&#123;</div><div class="line">		node.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(node);</div><div class="line">	</div><div class="line">	<span class="comment">// for Old WebKit and Old Firefox</span></div><div class="line">	<span class="keyword">if</span> (isOldWebKit || !supportOnload) &#123;</div><div class="line">		<span class="comment">// Begin after node insertion</span></div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			pollCss(node, callback, <span class="number">0</span>);</div><div class="line">		&#125;, <span class="number">1</span>);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(supportOnload)&#123;</div><div class="line">		node.onload = onload;</div><div class="line">		node.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="comment">// 加载失败(404)</span></div><div class="line">			onload();</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		node.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (<span class="regexp">/loaded|complete/</span>.test(node.readyState)) &#123;</div><div class="line">				onload();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">onload</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 确保只跑一次下载操作</span></div><div class="line">		node.onload = node.onerror = node.onreadystatechange = <span class="literal">null</span>;</div><div class="line"></div><div class="line">		<span class="comment">// 清空node引用，在低版本IE，不清除会造成内存泄露</span></div><div class="line">		node = <span class="literal">null</span>;</div><div class="line"></div><div class="line">		callback();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 循环判断css是否已加载成功</span></div><div class="line">	<span class="comment">/*</span></div><div class="line">	* @param node -- link节点</div><div class="line">	* @param callback -- 回调函数</div><div class="line">	* @param step -- 计步器，避免无限循环</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">pollCss</span>(<span class="params">node, callback, step</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> sheet = node.sheet,</div><div class="line">			isLoaded;</div><div class="line">			</div><div class="line">		step += <span class="number">1</span>;</div><div class="line">		</div><div class="line">		<span class="comment">// 保护，大于10分钟，则不再轮询</span></div><div class="line">		<span class="keyword">if</span>(step &gt; protectNum)&#123;</div><div class="line">			isLoaded = <span class="literal">true</span>;</div><div class="line">			</div><div class="line">			<span class="comment">// 清空node引用</span></div><div class="line">			node = <span class="literal">null</span>;</div><div class="line">			</div><div class="line">			callback();</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(isOldWebKit)&#123;</div><div class="line">			<span class="comment">// for WebKit &lt; 536</span></div><div class="line">			<span class="keyword">if</span>(sheet)&#123;</div><div class="line">				isLoaded = <span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(sheet)&#123;</div><div class="line">			<span class="comment">// for Firefox &lt; 9.0</span></div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">				<span class="keyword">if</span>(sheet.cssRules)&#123;</div><div class="line">					isLoaded = <span class="literal">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line">				<span class="comment">// 火狐特殊版本，通过特定值获知是否下载成功</span></div><div class="line">				<span class="comment">// The value of `ex.name` is changed from "NS_ERROR_DOM_SECURITY_ERR"</span></div><div class="line">				<span class="comment">// to "SecurityError" since Firefox 13.0. But Firefox is less than 9.0</span></div><div class="line">				<span class="comment">// in here, So it is ok to just rely on "NS_ERROR_DOM_SECURITY_ERR"</span></div><div class="line">				<span class="keyword">if</span>(ex.name === <span class="string">"NS_ERROR_DOM_SECURITY_ERR"</span>)&#123;</div><div class="line">					isLoaded = <span class="literal">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span>(isLoaded)&#123;</div><div class="line">				<span class="comment">// 延迟20ms是为了给下载的样式留够渲染的时间</span></div><div class="line">				callback();</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				pollCss(node, callback, step);</div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="number">20</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、解析代码"><a href="#三、解析代码" class="headerlink" title="三、解析代码"></a>三、解析代码</h3><h5 id="一、参数"><a href="#一、参数" class="headerlink" title="一、参数"></a>一、参数</h5><p> 本方法支持三个参数，可进行扩展。</p>
<p><strong>1.1 opations.url</strong></p>
<p> url是需要引入的css资源路径，也即<link>标签的href属性内容。</p>
<p><strong>1.2 options.id</strong></p>
<p> id是<link>标签的id属性。这个参数为非必要参数，可不传。主要作用是标记当前<link>标签，方便js进行查找，以确定是否已加载某个css文件。</p>
<p><strong>1.3 options.callback</strong></p>
<p> callback是css文件加载完成后会调用的回调函数。也存在特殊场景下，文件加载失败，回调函数仍旧执行的情况。</p>
<h5 id="二、生成标签，并插入头部head，进行加载资源"><a href="#二、生成标签，并插入头部head，进行加载资源" class="headerlink" title="二、生成标签，并插入头部head，进行加载资源"></a>二、生成<link>标签，并插入头部head，进行加载资源</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = options.url,</div><div class="line">	callback = <span class="keyword">typeof</span> options.callback == <span class="string">"function"</span> ? options.callback : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">	id = options.id,</div><div class="line">	node = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</div><div class="line">	</div><div class="line">node.rel = <span class="string">"stylesheet"</span>;</div><div class="line">node.type = <span class="string">"text/css"</span>;</div><div class="line">node.href = url;</div><div class="line"><span class="keyword">if</span>( <span class="keyword">typeof</span> id !== <span class="string">"undefined"</span> )&#123;</div><div class="line">	node.id = id;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(node);</div></pre></td></tr></table></figure>
<p> 生成一个dom节点<link>，然后配置好rel、type、href等必需的属性值，以便浏览器能正常解析链接的资源。<br> 接着，查找到head节点，将<link>节点插入。</p>
<h5 id="三、实现css资源下载状态监控的pollCss方法"><a href="#三、实现css资源下载状态监控的pollCss方法" class="headerlink" title="三、实现css资源下载状态监控的pollCss方法"></a>三、实现css资源下载状态监控的pollCss方法</h5><p> pollCss方法的职责是判断插入的link节点，也即node变量反馈资源是否已加载完成。<br> <strong>3.1 判断的主要依据</strong><br> 浏览器加载css资源，会给该link节点生成sheet属性，可以根据浏览器不同，读取sheet属性相关内容，来判断是否已经加载完成。所以第一句语句<code>var sheet = node.sheet</code>首先要做的就是获取sheet属性值。<br> <strong>3.2 普通浏览器判断</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sheet.cssRules)&#123;</div><div class="line">        isLoaded = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line">    <span class="comment">// 火狐特殊版本，通过特定值获知是否下载成功</span></div><div class="line">    <span class="comment">// The value of `ex.name` is changed from "NS_ERROR_DOM_SECURITY_ERR"</span></div><div class="line">    <span class="comment">// to "SecurityError" since Firefox 13.0. But Firefox is less than 9.0</span></div><div class="line">    <span class="comment">// in here, So it is ok to just rely on "NS_ERROR_DOM_SECURITY_ERR"</span></div><div class="line">    <span class="keyword">if</span>(ex.name === <span class="string">"NS_ERROR_DOM_SECURITY_ERR"</span>)&#123;</div><div class="line">        isLoaded = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 如果读取sheet.cssRules有值，证明css资源已经链接进页面，并开始解析。此时可以判断资源加载成功。<br> 如果读取失败，则根据抛错内容，判断是否有特定name属性<code>ex.name === &quot;NS_ERROR_DOM_SECURITY_ERR&quot;</code>。存在，则代表是低版本火狐（9.0以前），且资源已经加载成功。</p>
<p> <strong>3.3 旧webkit内核浏览器判断</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isOldWebKit = +navigator.userAgent.replace(<span class="regexp">/.*(?:AppleWebKit|AndroidWebKit)\/?(\d+).*/i</span>, <span class="string">"$1"</span>) &lt; <span class="number">536</span>; <span class="comment">// webkit旧内核做特殊处理</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(isOldWebKit)&#123;</div><div class="line">    <span class="comment">// for WebKit &lt; 536</span></div><div class="line">    <span class="keyword">if</span>(sheet)&#123;</div><div class="line">        isLoaded = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 如果是webkit旧内核浏览器，则只需要判断sheet属性值存在，则代表资源加载完成。</p>
<p> <strong>3.4 增加多次循环检测</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(isLoaded)&#123;</div><div class="line">        <span class="comment">// 延迟20ms是为了给下载的样式留够渲染的时间</span></div><div class="line">        callback();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        pollCss(node, callback, step);</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="number">20</span>);</div></pre></td></tr></table></figure></p>
<p> 触发pollCss方法后，可能第一次检测sheet值，会检测不到。也就代表还没加载完成。所以需要进行轮询。这里是隔20ms进行一次问询，直到资源加载完成为止。</p>
<p> <strong>3.5 轮询容错（针对Sea.js源码的优化）</strong><br> css资源加载也有可能出错的时机存在，而且存在不触发onerror方法的可能性。如果不加一个保护，则轮询可能一直持续下去，所以需要有一个极限阈值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> protectNum = <span class="number">300000</span>, <span class="comment">// 阈值10分钟，一秒钟执行pollCss 500次</span></div><div class="line">	step = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 很多代码....</span></div><div class="line"></div><div class="line">step += <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 保护，大于10分钟，则不再轮询</span></div><div class="line"><span class="keyword">if</span>(step &gt; protectNum)&#123;</div><div class="line">    isLoaded = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 清空node引用</span></div><div class="line">    node = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    callback();</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的阈值是轮询10分钟，如果10分钟后，仍然不符合条件，则默认资源已下载完成，执行callback方法，并清空node引用。</p>
<h5 id="四、确定触发pollCss检查的时机"><a href="#四、确定触发pollCss检查的时机" class="headerlink" title="四、确定触发pollCss检查的时机"></a>四、确定触发pollCss检查的时机</h5><p> <strong>4.1 pollCss轮询的应用场景</strong><br> 当浏览器内核是旧的webkit内核时，或者不支持<link>节点触发onload方法时，才使用pollCss进行轮询。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for Old WebKit and Old Firefox</span></div><div class="line"><span class="keyword">if</span> (isOldWebKit || !supportOnload) &#123;</div><div class="line">    <span class="comment">// Begin after node insertion</span></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        pollCss(node, callback, <span class="number">0</span>);</div><div class="line">    &#125;, <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="五、现代浏览器直接用onload和onreadystatechange做判断"><a href="#五、现代浏览器直接用onload和onreadystatechange做判断" class="headerlink" title="五、现代浏览器直接用onload和onreadystatechange做判断"></a>五、现代浏览器直接用onload和onreadystatechange做判断</h5><p> 现代浏览器用这种方式判断，可以避免轮询的弊端。判断也更加准确及时。</p>
<p> <strong>5.1 onload方法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onload</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 确保只跑一次下载操作</span></div><div class="line">    node.onload = node.onerror = node.onreadystatechange = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 清空node引用，在低版本IE，不清除会造成内存泄露</span></div><div class="line">    node = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    callback();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> onload方法触发执行后，应立即将多个相关方法进行重置，以避免callback多次触发。<br> <code>node = null;</code>将node重置为null，是为了避免低版本的IE出现内存溢出问题，及时清除没用的dom节点。<br> 最后，执行callback方法。</p>
<p> <strong>5.2 支持onload方法浏览器的处理</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(supportOnload)&#123;</div><div class="line">    node.onload = onload;</div><div class="line">    node.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 加载失败(404)</span></div><div class="line">        onload();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> <strong>5.3 不支持onload方法浏览器的处理</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(supportOnload)&#123;</div><div class="line">	<span class="comment">// 代码...</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    node.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="regexp">/loaded|complete/</span>.test(node.readyState)) &#123;</div><div class="line">            onload();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p> 选择剥离Sea.js方法进行改造的原因：因为该js库使用人群很广泛，如果出问题，作者也会及时修复。所以，以此代码为蓝本进行改造契合公司的用户群，避免大面积出现问题。<br> 在产品上应用该方法后，到目前为止，未有客户反馈样式异常问题。所以，看本文章的程序猿们，可以放心使用。<br> ps：公司用户群有1千多万的用户量，涉及大大小小繁杂的浏览器，从IE6到chrome都有。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、方法引用来源和应用&quot;&gt;&lt;a href=&quot;#一、方法引用来源和应用&quot; class=&quot;headerlink&quot; title=&quot;一、方法引用来源和应用&quot;&gt;&lt;/a&gt;一、方法引用来源和应用&lt;/h3&gt;&lt;p&gt; 此动态加载css方法 loadCss，剥离自Sea.js，并做了进
    
    </summary>
    
      <category term="JavaScript" scheme="https://wall-wxk.github.io/categories/JavaScript/"/>
    
    
      <category term="CSS" scheme="https://wall-wxk.github.io/tags/CSS/"/>
    
      <category term="loadCss" scheme="https://wall-wxk.github.io/tags/loadCss/"/>
    
      <category term="Sea.js" scheme="https://wall-wxk.github.io/tags/Sea-js/"/>
    
  </entry>
  
  <entry>
    <title>hash实现锚点平滑滚动定位</title>
    <link href="https://wall-wxk.github.io/2017/01/15/hashAnchor/"/>
    <id>https://wall-wxk.github.io/2017/01/15/hashAnchor/</id>
    <published>2017-01-15T13:34:43.000Z</published>
    <updated>2017-02-19T05:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、科普时间"><a href="#一、科普时间" class="headerlink" title="一、科普时间"></a>一、科普时间</h3><p><strong>hash</strong></p>
<blockquote>
<p>hash 属性是一个可读可写的字符串，该字符串是 URL 的锚部分（从 # 号开始的部分）。<br>location.hash=anchorname。</p>
</blockquote>
<p><strong>锚点</strong></p>
<blockquote>
<p>锚点是网页制作中<a href="http://baike.baidu.com/view/15703.htm" target="_blank" rel="external">超级链接</a>的一种，又叫<a href="http://baike.baidu.com/view/1153353.htm" target="_blank" rel="external">命名锚记</a>。命名锚记像一个迅速<a href="http://baike.baidu.com/view/265400.htm" target="_blank" rel="external">定位器</a>一样，是一种页面内的超级链接</p>
</blockquote>
<h3 id="二、锚点简单的栗子"><a href="#二、锚点简单的栗子" class="headerlink" title="二、锚点简单的栗子"></a>二、锚点简单的栗子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪锚点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    	.anchor1, .anchor2&#123;width:100px;height:100px;margin-top:2000px;margin-bottom:2000px;&#125;</div><div class="line">    	.anchor1&#123;background:red;&#125;</div><div class="line">    	.anchor2&#123;background:green;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#anchor1"</span>&gt;</span>锚点1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#anchor2"</span>&gt;</span>锚点2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"anchor1"</span> <span class="attr">class</span>=<span class="string">"anchor1"</span>&gt;</span></div><div class="line">    	锚点1</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"anchor2"</span> <span class="attr">class</span>=<span class="string">"anchor2"</span>&gt;</span></div><div class="line">    	锚点2</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>解析</strong><br> 访问该页面的地址:<code>http://127.0.0.1/anchor.html</code>(我是在本地服务器上测试的)<br> 点击a链接锚点1，则页面会直接跳到红色的div(锚点1)，同时，浏览器地址改变为<code>http://127.0.0.1/anchor.html#anchor1</code><br> 虽然可以直接定位到制定的位置，但是效果很差，没有平缓的过渡效果。</p>
<p>###三、改进过渡效果<br><strong>1）前期理论准备</strong><br> 既然hash值是对应锚点的id值，那如果改为js动态获取hash值，然后再根据hash值获得dom对象。最后，用js进行平缓过渡。<br> 基于这个思路，就必须要求hash的取名有独特性，不能跟页面中的任何一个id一致，否则会触发浏览器默认的锚点定位行为。<br> <br><strong>2）确定特殊hash命名</strong><br> hash命名直接取特殊的前缀：w_，比如锚点1对应的hash值为w_anchor1<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪锚点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    	.anchor1, .anchor2&#123;width:100px;height:100px;&#125;</div><div class="line">    	.anchor1&#123;background:red;&#125;</div><div class="line">    	.anchor2&#123;background:green;&#125;</div><div class="line">     	.spacing1, .spacing2&#123;height:200px;&#125;</div><div class="line">      	.spacing1&#123;background:yellow;&#125;</div><div class="line">      	.spacing2&#123;background:gray;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#w_anchor1"</span>&gt;</span>锚点1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#w_anchor2"</span>&gt;</span>锚点2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔8<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"anchor1"</span> <span class="attr">class</span>=<span class="string">"anchor1"</span>&gt;</span>锚点1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔8<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"anchor2"</span> <span class="attr">class</span>=<span class="string">"anchor2"</span>&gt;</span>锚点2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔8<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p> <br><strong>3）编写读取特殊hasn值的方法以及缓动方法(本示例不考虑兼容性)</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line">	<span class="comment">// 监听页面加载完成后，检查是否需要定位锚点</span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    scrollToAnchor();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// 监听地址栏url的hash值改变时，检查是否需要定位锚点</span></div><div class="line">  <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    scrollToAnchor();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// 滚动到自定义的伪锚点</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">scrollToAnchor</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> hash = getHash(), <span class="comment">// 获取url的hash值</span></div><div class="line">      anchor = getAnchor(hash), <span class="comment">// 获取伪锚点的id</span></div><div class="line">      anchorDom, <span class="comment">// 伪锚点dom对象</span></div><div class="line">      anchorScrollTop; <span class="comment">// 伪锚点距离页面顶部的距离</span></div><div class="line"></div><div class="line">    <span class="comment">// 如果不存在伪锚点,则直接结束</span></div><div class="line">    <span class="keyword">if</span>(anchor.length &lt; <span class="number">1</span>)&#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    anchorDom = getDom(anchor);</div><div class="line">    anchorScrollTop = anchorDom.offsetTop;</div><div class="line"></div><div class="line">    animationToAnchor(<span class="built_in">document</span>.body.scrollTop, anchorScrollTop);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/* </span></div><div class="line">  	@function 滚动到指定位置方法</div><div class="line">  	@param startNum &#123;int&#125; -- 开始位置</div><div class="line">  	@param stopNum &#123;int&#125; -- 结束位置</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">animationToAnchor</span>(<span class="params">startNum, stopNum</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> nowNum = startNum + <span class="number">10</span>; <span class="comment">// 步进为10</span></div><div class="line"></div><div class="line">      <span class="keyword">if</span>(nowNum &gt; stopNum)&#123;</div><div class="line">        nowNum = stopNum;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 缓动方法</span></div><div class="line">      <span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      	<span class="built_in">document</span>.body.scrollTop = nowNum; <span class="comment">// 当前示例页面，滚动条在body，所以滚动body</span></div><div class="line"></div><div class="line">      	<span class="comment">// 滚动到预定位置则结束</span></div><div class="line">      	<span class="keyword">if</span>(nowNum == stopNum)&#123;</div><div class="line">      	  <span class="keyword">return</span>;</div><div class="line">      	&#125;</div><div class="line"></div><div class="line">      	animationToAnchor(nowNum, stopNum); <span class="comment">// 只要还符合缓动条件，则递归调用</span></div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取锚点id</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getAnchor</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> checkAnchor(str) ? str.split(<span class="string">"w_"</span>)[<span class="number">1</span>] : <span class="string">""</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 判断是否为特殊的hash值，也即是否为伪锚点</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkAnchor</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.indexOf(<span class="string">"w_"</span>) == <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取hash值</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getHash</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.location.hash.substring(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取dom对象</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getDom</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</div><div class="line">  &#125;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure></p>
<p> </p>
<hr>
<p> <br><a href="https://wall-wxk.github.io/blogDemo/anchor/anchor.html">在线演示</a>:<a href="https://wall-wxk.github.io/blogDemo/anchor/anchor.html">https://wall-wxk.github.io/blogDemo/anchor/anchor.html</a><br><strong>最后，附上完整示例源码</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪锚点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    	.anchor1, .anchor2&#123;width:100px;height:100px;&#125;</div><div class="line">    	.anchor1&#123;background:red;&#125;</div><div class="line">    	.anchor2&#123;background:green;&#125;</div><div class="line">     	.spacing1, .spacing2&#123;height:200px;&#125;</div><div class="line">      	.spacing1&#123;background:yellow;&#125;</div><div class="line">      	.spacing2&#123;background:gray;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#w_anchor1"</span>&gt;</span>锚点1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#w_anchor2"</span>&gt;</span>锚点2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔8<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"anchor1"</span> <span class="attr">class</span>=<span class="string">"anchor1"</span>&gt;</span>锚点1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔8<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"anchor2"</span> <span class="attr">class</span>=<span class="string">"anchor2"</span>&gt;</span>锚点2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing1"</span>&gt;</span>间隔7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spacing2"</span>&gt;</span>间隔8<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line">      	<span class="comment">// 监听页面加载完成后，检查是否需要定位锚点</span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          scrollToAnchor();</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 监听地址栏url的hash值改变时，检查是否需要定位锚点</span></div><div class="line">        <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          scrollToAnchor();</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 滚动到自定义的伪锚点</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">scrollToAnchor</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> hash = getHash(), <span class="comment">// 获取url的hash值</span></div><div class="line">            anchor = getAnchor(hash), <span class="comment">// 获取伪锚点的id</span></div><div class="line">            anchorDom, <span class="comment">// 伪锚点dom对象</span></div><div class="line">            anchorScrollTop; <span class="comment">// 伪锚点距离页面顶部的距离</span></div><div class="line"></div><div class="line">          <span class="comment">// 如果不存在伪锚点,则直接结束</span></div><div class="line">          <span class="keyword">if</span>(anchor.length &lt; <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          anchorDom = getDom(anchor);</div><div class="line">          anchorScrollTop = anchorDom.offsetTop;</div><div class="line"></div><div class="line">          animationToAnchor(<span class="built_in">document</span>.body.scrollTop, anchorScrollTop);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* </span></div><div class="line">        	@function 滚动到指定位置方法</div><div class="line">        	@param startNum &#123;int&#125; -- 开始位置</div><div class="line">        	@param stopNum &#123;int&#125; -- 结束位置</div><div class="line">        */</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">animationToAnchor</span>(<span class="params">startNum, stopNum</span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> nowNum = startNum + <span class="number">10</span>; <span class="comment">// 步进为10</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span>(nowNum &gt; stopNum)&#123;</div><div class="line">              nowNum = stopNum;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 缓动方法</span></div><div class="line">			<span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">document</span>.body.scrollTop = nowNum; <span class="comment">// 当前示例页面，滚动条在body，所以滚动body</span></div><div class="line"></div><div class="line">				<span class="comment">// 滚动到预定位置则结束</span></div><div class="line">				<span class="keyword">if</span>(nowNum == stopNum)&#123;</div><div class="line">				  <span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				animationToAnchor(nowNum, stopNum); <span class="comment">// 只要还符合缓动条件，则递归调用</span></div><div class="line">			&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 获取锚点id</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAnchor</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> checkAnchor(str) ? str.split(<span class="string">"w_"</span>)[<span class="number">1</span>] : <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 判断是否为特殊的hash值，也即是否为伪锚点</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkAnchor</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> str.indexOf(<span class="string">"w_"</span>) == <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 获取hash值</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getHash</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="built_in">window</span>.location.hash.substring(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 获取dom对象</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getDom</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</div><div class="line">        &#125;</div><div class="line">      &#125;)(<span class="built_in">window</span>);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、科普时间&quot;&gt;&lt;a href=&quot;#一、科普时间&quot; class=&quot;headerlink&quot; title=&quot;一、科普时间&quot;&gt;&lt;/a&gt;一、科普时间&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;hash&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hash 属性是一个可读
    
    </summary>
    
      <category term="HTML" scheme="https://wall-wxk.github.io/categories/HTML/"/>
    
    
      <category term="hash" scheme="https://wall-wxk.github.io/tags/hash/"/>
    
      <category term="requestAnimationFrame" scheme="https://wall-wxk.github.io/tags/requestAnimationFrame/"/>
    
  </entry>
  
  <entry>
    <title>IE条件注释，嗅探低版本IE用户，并引导升级</title>
    <link href="https://wall-wxk.github.io/2017/01/09/killIE/"/>
    <id>https://wall-wxk.github.io/2017/01/09/killIE/</id>
    <published>2017-01-09T13:08:01.000Z</published>
    <updated>2017-02-19T12:33:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、科普IE条件注释"><a href="#一、科普IE条件注释" class="headerlink" title="一、科普IE条件注释"></a>一、科普IE条件注释</h3><blockquote>
<p>IE条件注释功能是条件注释是<strong>IE特有</strong>的一种功能，能对IE系列产品进行单独的XHTML代码处理，注意，主要是针对XHTML,而非CSS。条件注释功能非常强大，可以<strong>进行true和false判断</strong>。</p>
</blockquote>
<p> 最大好处：IE条件注释 属于微软官方给出的兼容解决办法而且还能通过W3C的效验。</p>
<hr>
<p> 上个栗子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if IE 8]&gt; </span></div><div class="line">&lt;link type="text/css" rel="stylesheet" href="my.css" /&gt;   </div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure></p>
<p> 语句的意思是：IE8浏览器下，引入my.css文件。其他版本IE浏览器，if判断为flase，则不引入。</p>
<hr>
<h4 id="关键词解释"><a href="#关键词解释" class="headerlink" title="关键词解释"></a>关键词解释</h4><blockquote>
<p>lt ：Less than的简写，小于。<br>lte ：Less than or equal to的简写，小于或等于。<br>gt ：Greater than的简写，大于。<br>gte：Greater than or equal to的简写，大于或等于。<br>!：不等于。</p>
</blockquote>
<h3 id="二、引导升级实现"><a href="#二、引导升级实现" class="headerlink" title="二、引导升级实现"></a>二、引导升级实现</h3><h4 id="1）嗅探低版本小于IE9的用户"><a href="#1）嗅探低版本小于IE9的用户" class="headerlink" title="1）嗅探低版本小于IE9的用户"></a>1）嗅探低版本小于IE9的用户</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line"> // IE浏览器版本低于IE9的用户</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<h4 id="2）强制跳转页面的js"><a href="#2）强制跳转页面的js" class="headerlink" title="2）强制跳转页面的js"></a>2）强制跳转页面的js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	<span class="built_in">window</span>.location.href = <span class="string">"http://"</span>+ <span class="built_in">window</span>.location.host +<span class="string">"/kill-IE.html"</span>;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="3）双剑合并"><a href="#3）双剑合并" class="headerlink" title="3）双剑合并"></a>3）双剑合并</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line">  &lt;script type="text/javascript"&gt;</div><div class="line">	window.location.href = "http://"+ window.location.host +"/kill-IE.html";</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<h3 id="三、优化升级"><a href="#三、优化升级" class="headerlink" title="三、优化升级"></a>三、优化升级</h3><p> 在实际使用场景中，用户升级浏览器后，可能会复制kill-IE.html的页面url进行第二次访问。<br> 这就带来一个问题：用户怎么刷新，还是停留在kill-IE.html这个页面。</p>
<p><strong><em>kill-IE.html</em></strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>kill-IE<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span>&gt;</span>推荐浏览器：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/s?wd=chrome"</span> <span class="attr">title</span>=<span class="string">"谷歌"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> &gt;</span>Google浏览器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p> </p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p> kill-IE.html页面，判断当前浏览的是不是低版本浏览器，不是的话，自动跳转回访问之前的页面或者首页。</p>
<p><strong>1)记录跳转kill-IE.html之前，所在页面的url</strong></p>
<p> 将url作为一个参数值，添加在跳转链接上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> _location = <span class="built_in">window</span>.location;</div><div class="line">		_location.href = <span class="string">"http://"</span>+ _location.host +<span class="string">"/kill-IE.html?url="</span>+ <span class="built_in">encodeURIComponent</span>(_location.href);</div><div class="line">	&#125;)();</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p> <br><strong>2)修改kill-IE.html</strong><br> 修改kill-IE.html的处理逻辑，增加判断当前浏览器是否为低版本浏览器，如果不是低版本的浏览器，则不需要停留在当前页面。</p>
<p> <strong>跳转重定向解决方式：</strong><br> 获取当前href的url参数。<br> 如果有，则进行跳转。<br> 没有该参数，则默认跳转回主域名。</p>
<p> <a href="https://wall-wxk.github.io/blogDemo/2017/01/20/kill-IE.html">在线演示</a>：<a href="https://wall-wxk.github.io/blogDemo/2017/01/20/kill-IE.html">https://wall-wxk.github.io/blogDemo/2017/01/20/kill-IE.html</a><br> <a href="https://wall-wxk.github.io/blogDemo/2017/01/20/kill-IE.html?url=http%3A%2F%2Fwww.baidu.com">模拟访问来源是百度</a>：<a href="https://wall-wxk.github.io/blogDemo/2017/01/20/kill-IE.html?url=http%3A%2F%2Fwww.baidu.com">https://wall-wxk.github.io/blogDemo/2017/01/20/kill-IE.html?url=http%3A%2F%2Fwww.baidu.com</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>kill-IE<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> isGoodBrowser = <span class="literal">true</span>; <span class="comment">// 默认标记为现代浏览器</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--[if ltIE 9]&gt;</span></div><div class="line">&lt;script&gt;</div><div class="line">  isGoodBrowser = false; // 标记为需要升级的低版本浏览器</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 如果是低级版本浏览器，则不进行重定向跳转</span></div><div class="line">    <span class="keyword">if</span>(!isGoodBrowser)&#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> _location = <span class="built_in">window</span>.location, </div><div class="line">      _search = _location.search.substring(<span class="number">1</span>), <span class="comment">// url参数</span></div><div class="line">      _jumpUrl = <span class="string">"http://"</span>+_location.host, <span class="comment">// 主域名</span></div><div class="line">      _params, <span class="comment">// 参数集合</span></div><div class="line">      _item, <span class="comment">// 单个参数</span></div><div class="line">      _result = <span class="string">""</span>, <span class="comment">// 最后得到的跳转url</span></div><div class="line">      _len;</div><div class="line">      </div><div class="line">    <span class="comment">// 抓取url参数</span></div><div class="line">    <span class="keyword">if</span>(_search.indexOf(<span class="string">"url"</span>) != <span class="number">-1</span>)&#123;</div><div class="line">      _params = _search.split(<span class="string">"&amp;"</span>);</div><div class="line">      _len = _params.length;</div><div class="line">      </div><div class="line">      <span class="keyword">while</span>(_len)&#123;</div><div class="line">       _len -= <span class="number">1</span>;</div><div class="line">       _item = _params[_len];</div><div class="line">       </div><div class="line">       <span class="keyword">if</span>(_item.indexOf(<span class="string">"url="</span>) != <span class="number">-1</span>)&#123;</div><div class="line">         result = _item.split(<span class="string">"="</span>)[<span class="number">1</span>];</div><div class="line">         <span class="keyword">if</span>(result.length &gt; <span class="number">0</span>)&#123;</div><div class="line">          _jumpUrl = <span class="built_in">decodeURIComponent</span>(result); <span class="comment">// 转义回普通字符</span></div><div class="line">         &#125;</div><div class="line">         <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    _location.href = _jumpUrl; <span class="comment">// 跳转页面</span></div><div class="line">  &#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>推荐浏览器：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/s?wd=chrome"</span> <span class="attr">title</span>=<span class="string">"谷歌"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> &gt;</span>Google浏览器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="完美解决！-Y"><a href="#完美解决！-Y" class="headerlink" title="完美解决！ ^_^ Y"></a>完美解决！ ^_^ Y</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、科普IE条件注释&quot;&gt;&lt;a href=&quot;#一、科普IE条件注释&quot; class=&quot;headerlink&quot; title=&quot;一、科普IE条件注释&quot;&gt;&lt;/a&gt;一、科普IE条件注释&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;IE条件注释功能是条件注释是&lt;strong&gt;IE特
    
    </summary>
    
      <category term="JavaScript" scheme="https://wall-wxk.github.io/categories/JavaScript/"/>
    
    
      <category term="kill IE" scheme="https://wall-wxk.github.io/tags/kill-IE/"/>
    
      <category term="嗅探" scheme="https://wall-wxk.github.io/tags/%E5%97%85%E6%8E%A2/"/>
    
  </entry>
  
</feed>
