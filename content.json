[{"title":"JavaScript函数节流和函数防抖之间的区别","date":"2017-02-14T23:15:35.000Z","path":"2017/02/15/throttleAndDebounce/","text":"一、概念解释 函数节流和函数防抖，两者都是优化高频率执行js代码的一种手段。 大家大概都知道旧款电视机的工作原理，就是一行行得扫描出色彩到屏幕上，然后组成一张张图片。由于肉眼只能分辨出一定频率的变化，当高频率的扫描，人类是感觉不出来的。反而形成一种视觉效果，就是一张图。就像高速旋转的风扇，你看不到扇叶，只看到了一个圆一样。 同理，可以类推到js代码。在一定时间内，代码执行的次数不一定要非常多。达到一定频率就足够了。因为跑得越多，带来的效果也是一样。倒不如，把js代码的执行次数控制在合理的范围。既能节省浏览器CPU资源，又能让页面浏览更加顺畅，不会因为js的执行而发生卡顿。这就是函数节流和函数防抖要做的事。 函数节流是指一定时间内js方法只跑一次。比如人的眨眼睛，就是一定时间内眨一次。这是函数节流最形象的解释。 函数防抖是指频繁触发的情况下，只有足够的空闲时间，才执行代码一次。比如生活中的坐公交，就是一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有别人没刷卡了，司机才开车。 二、函数节流 函数节流应用的实际场景，多数在监听页面元素滚动事件的时候会用到。因为滚动事件，是一个高频触发的事件。以下是监听页面元素滚动的示例代码： 1234567891011121314// 函数节流var canRun = true;document.getElementById(\"throttle\").onscroll = function()&#123; if(!canRun)&#123; // 判断是否已空闲，如果在执行中，则直接return return; &#125; canRun = false; setTimeout(function()&#123; console.log(\"函数节流\"); canRun = true; &#125;, 300);&#125;; 函数节流的要点是，声明一个变量当标志位，记录当前代码是否在执行。 如果空闲，则可以正常触发方法执行。 如果代码正在执行，则取消这次方法执行，直接return。 这个方法的作用是监听ID为throttle元素的滚动事件。 当canRun为true，则代表现在的滚动处理事件是空闲的，可以使用。 通过关卡if(!canRun)，等于就拿到了通行证。然后下一步的操作就是立马将关卡关上canRun=false。这样，其他请求执行滚动事件的方法，就被挡回去了。 接着用setTimeout规定最小的时间间隔300，接着再执行setTimeout方法体里面的内容。 最后，等setTimeout里面的方法都执行完毕，才释放关卡canRun=true，允许下一个访问者进来。 这个函数节流的实现形式，需要注意的是执行的间隔时间是&gt;=300ms。如果具体执行的方法是包含callback的，也可以将canRun=true这一步放到callback中。理解了函数节流的关卡设置重点，其实改起来就简单多了。 三、函数防抖 函数防抖的应用场景，最常见的就是用户注册时候的手机号码验证和邮箱验证了。只有等用户输入完毕后，前端才需要检查格式是否正确，如果不正确，再弹出提示语。以下还是以页面元素滚动监听的例子，来进行解析： 123456789// 函数防抖var timer = false;document.getElementById(\"debounce\").onscroll = function()&#123; clearTimeout(timer); // 清除未执行的代码，重置回初始化状态 timer = setTimeout(function()&#123; console.log(\"函数防抖\"); &#125;, 300);&#125;; 函数防抖的要点，也是需要一个setTimeout来辅助实现。延迟执行需要跑的代码。 如果方法多次触发，则把上次记录的延迟执行代码用clearTimeout清掉，重新开始。 如果计时完毕，没有方法进来访问触发，则执行代码。 这个方法的作用是监听ID为debounce元素的滚动事件 进入滚动事件方法体的时候，做的第一件事就是清除上次未执行的setTimeout。而setTimeout的引用id由变量timer记录。 clearTimeout方法，允许传入无效的值。所以这里直接执行clearTimeout即可。 然后，将需要执行的代码放入setTimeout中，再返回setTimeout引用给timer缓存。 如果倒计时300ms以后，还没有新的方法触发滚动事件，则执行setTimeout中的代码。 函数防抖的实现重点，就是巧用setTimeout做缓存池，而且可以轻易地清除待执行的代码。 其实，用队列的方式也可以做到这种效果。这里就不深入了。 四、在线demo 这是我写的一个测试demo，把鼠标移动到模块上方，滚动滚轮，即可在控制台查看输出效果。 demo地址：https://wall-wxk.github.io/blogDemo/2017/02/15/throttleAndDebounce.html","tags":[{"name":"throttle","slug":"throttle","permalink":"https://wall-wxk.github.io/tags/throttle/"},{"name":"debounce","slug":"debounce","permalink":"https://wall-wxk.github.io/tags/debounce/"}]},{"title":"JavaScript嗅探执行神器-sniffer.js，你值得拥有！","date":"2017-02-13T16:29:16.000Z","path":"2017/02/14/sniffer/","text":"一、热身——先看实战代码 a.js 文件 1234567891011121314151617// 定义Wall及内部方法;(function(window, FUNC, undefined)&#123; var name = 'wall'; Wall.say = function(name)&#123; console.log('I\\'m '+ name +' !'); &#125;; Wall.message = &#123; getName : function()&#123; return name; &#125;, setName : function(firstName, secondName)&#123; name = firstName+'-'+secondName; &#125; &#125;;&#125;)(window, window.Wall || (window.Wall = &#123;&#125;)); index.jsp文件 12345678910111213141516&lt;script type='text/javascript'&gt; &lt;% // Java 代码直出 js out.print(\"Sniffer.run(&#123;'base':window,'name':'Wall.say','subscribe':true&#125;, 'wall');\\n\"); %&gt; // Lab.js是一个文件加载工具 // 依赖的a.js加载完毕后，则可执行缓存的js方法 $LAB.script(\"a.js\").wait(function()&#123; // 触发已订阅的方法 Sniffer.trigger(&#123; 'base':window, 'name':'Wall.say' &#125;); &#125;);&lt;/script&gt; 这样，不管a.js文件多大，Wall.say(&#39;wall&#39;)都可以等到文件真正加载完后，再执行。 二、工具简介123456// 执行 Wall.message.setName('wang', 'wall');Sniffer.run(&#123; 'base':Wall, 'name':'message.setName', 'subscribe':true&#125;, 'wang', 'wall'); 看这个执行代码，你也许会感觉困惑-什么鬼！ sniffer.js作用就是可以试探执行方法，如果不可执行，也不会抛错。 比如例子Wall.message.setName(&#39;wang&#39;, &#39;wall&#39;); 如果该方法所在文件还没有加载，也不会报错。 处理的逻辑就是先缓存起来，等方法加载好后，再进行调用。 再次调用的方法如下： 12345// 触发已订阅的方法Sniffer.trigger(&#123; 'base':Wall, 'name':'message.setName'&#125;); 在线demo:https://wall-wxk.github.io/blogDemo/2017/02/13/sniffer.html (需要在控制台看，建议用pc) 说起这个工具的诞生，是因为公司业务的需要，自己写的一个工具。 因为公司的后台语言是java，喜欢用jsp的out.print()方法，直接输出一些js方法给客户端执行。 这就存在一个矛盾点，有时候js文件还没下载好，后台输出的语句已经开始调用方法，这就很尴尬。 所以，这个工具的作用有两点： 1. 检测执行的js方法是否存在，存在则立即执行。 2. 缓存暂时不存在的js方法，等真正可执行的时候，再从缓存队列里面拿出来，触发执行。 三、嗅探核心基础——运算符in 方法是通过使用运算符in去遍历命名空间中的方法，如果取得到值，则代表可执行。反之，则代表不可执行。 通过这个例子，就可以知道这个sniffer.js的嗅探原理了。 四、抽象出嗅探方法12345678910111213141516171819202122232425262728/*** @function &#123;private&#125; 检测方法是否可用* @param &#123;string&#125; funcName -- 方法名***.***.**** @param &#123;object&#125; base -- 方法所依附的对象 **/function checkMethod(funcName, base)&#123; var methodList = funcName.split('.'), // 方法名list readyFunc = base, // 检测合格的函数部分 result = &#123; 'success':true, 'func':function()&#123;&#125; &#125;, // 返回的检测结果 methodName, // 单个方法名 i; for(i = 0; i &lt; methodList.length; i++)&#123; methodName = methodList[i]; if(methodName in readyFunc)&#123; readyFunc = readyFunc[methodName]; &#125;else&#123; result.success = false; return result; &#125; &#125; result.func = readyFunc; return result; &#125; 像Wall.message.setName(&#39;wang&#39;, &#39;wall&#39;);这样的方法，要判断是否可执行，需要执行以下步骤： 1. 判断Wall是否存在window中。 2. Wall存在，则继续判断message是否在Wall中。 3. message存在，则继续判断setName是否在message中 4. 最后，都判断存在了，则代表可执行。如果中间的任意一个检测不通过，则方法不可执行。 五、实现缓存 缓存使用闭包实现的。以队列的性质，存储在list中 1234567891011121314;(function(FUN, undefined)&#123; 'use strict' var list = []; // 存储订阅的需要调用的方法 // 执行方法 FUN.run = function()&#123; // 很多代码... //将订阅的函数缓存起来 list.push(...); &#125;; &#125;)(window.Sniffer || (window.Sniffer = &#123;&#125;)); 六、确定队列中单个项的内容 1. 指定检测的基点 base 由于运算符in工作时，需要几个基点给它检测。所以第一个要有的项就是base 2. 检测的字符类型的方法名 name 像Wall.message.setName(&#39;wang&#39;, &#39;wall&#39;);，如果已经指定基点{&#39;base&#39;:Wall}，则还需要message.setName。所以要存储message.setName，也即{&#39;base&#39;:Wall, &#39;name&#39;:&#39;message.setName&#39;} 3. 缓存方法的参数 args 像Wall.message.setName(&#39;wang&#39;, &#39;wall&#39;);，有两个参数(&#39;wang&#39;, &#39;wall&#39;)，所以需要存储起来。也即{&#39;base&#39;:Wall, &#39;name&#39;:&#39;message.setName&#39;, &#39;args&#39;:[&#39;wang&#39;, &#39;wall&#39;]}。 为什么参数使用数组缓存起来，是因为方法的参数是变化的，所以后续的代码需要apply去做触发。同理，这里的参数就需要用数组进行缓存 所以，缓存队列的单个项内容如下：12345&#123; 'base':Wall, 'name':'message.setName', 'args':['wang', 'wall']&#125; 七、实现run方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061;(function(FUN, undefined)&#123; 'use strict' var list = []; // 存储订阅的需要调用的方法 /** * @function 函数转换接口，用于判断函数是否存在命名空间中，有则调用，无则不调用 * @version &#123;create&#125; 2015-11-30 * @description * 用途：只设计用于延迟加载 * 示例：Wall.mytext.init(45, false); * 调用：Sniffer.run(&#123;'base':window, 'name':'Wall.mytext.init'&#125;, 45, false); 或 Sniffer.run(&#123;'base':Wall, 'name':'mytext.init'&#125;, 45, false); * 如果不知道参数的个数，不能直接写，可以用apply的方式调用当前方法 * 示例: Sniffer.run.apply(window, [ &#123;'name':'Wall.mytext.init'&#125;, 45, false ]); **/ FUN.run = function()&#123; if(arguments.length &lt; 1 || typeof arguments[0] != 'object')&#123; throw new Error('Sniffer.run 参数错误'); return; &#125; var name = arguments[0].name, // 函数名 0位为Object类型，方便做扩展 subscribe = arguments[0].subscribe || false, // 订阅当函数可执行时，调用该函数, true:订阅; false:不订阅 prompt = arguments[0].prompt || false, // 是否显示提示语(当函数未能执行的时候) promptMsg = arguments[0].promptMsg || '功能还在加载中，请稍候', // 函数未能执行提示语 base = arguments[0].base || window, // 基准对象，函数查找的起点 args = Array.prototype.slice.call(arguments), // 参数列表 funcArgs = args.slice(1), // 函数的参数列表 callbackFunc = &#123;&#125;, // 临时存放需要回调的函数 result; // 检测结果 result = checkMethod(name, base); if(result.success)&#123; subscribe = false; try&#123; return result.func.apply(result.func, funcArgs); // apply调整函数的指针指向 &#125;catch(e)&#123; (typeof console != 'undefined') &amp;&amp; console.log &amp;&amp; console.log('错误:name='+ e.name +'; message='+ e.message); &#125; &#125;else&#123; if(prompt)&#123; // 输出提示语到页面，代码略 &#125; &#125; //将订阅的函数缓存起来 if(subscribe)&#123; callbackFunc.name = name; callbackFunc.base = base; callbackFunc.args = funcArgs; list.push(callbackFunc); &#125; &#125;; // 嗅探方法 function checkMethod(funcName, base)&#123; // 代码... &#125;&#125;)(window.Sniffer || (window.Sniffer = &#123;&#125;)); run方法的作用是：检测方法是否可执行，可执行，则执行。不可执行，则根据传入的参数，决定要不要缓存。 这个run方法的重点，是妙用arguments，实现0-n个参数自由传入。 第一个形参arguments[0]，固定是用来传入配置项的。存储要检测的基点base，方法字符串argument[0].name以及缓存标志arguments[0].subscribe。 第二个形参到第n个形参，则由方法调用者传入需要使用的参数。 利用泛型方法，将arguments转换为真正的数组。（args = Array.prototype.slice.call(arguments)） 然后，切割出方法调用需要用到的参数。（funcArgs = args.slice(1)） run方法的arguments处理完毕后，就可以调用checkMethod方法进行嗅探。 根据嗅探的结果，分两种情况： 嗅探结果为可执行，则调用apply执行 return result.func.apply(result.func, funcArgs); 这里的重点是必须制定作用域为result.func，也即例子的Wall.message.setName。 这样，如果方法中使用了this，指向也不会发生改变。 使用return，是因为一些方法执行后是有返回值的，所以这里需要加上return，将返回值传递出去。 嗅探结果为不可执行，则根据传入的配置值subscribe，决定是否缓存到队列list中。 需要缓存，则拼接好队列单个项，push进list。 八、实现trigger方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061;(function(FUN, undefined)&#123; 'use strict' var list = []; // 存储订阅的需要调用的方法 // 执行方法 FUN.run = function()&#123; // 代码... &#125;; /** * @function 触发函数接口，调用已提前订阅的函数 * @param &#123;object&#125; option -- 需要调用的相关参数 * @description * 用途：只设计用于延迟加载 * 另外，调用trigger方法的前提是，订阅方法所在js已经加载并解析完毕 * 不管触发成功与否，都会清除list中对应的项 **/ FUN.trigger = function(option)&#123; if(typeof option !== 'object')&#123; throw new Error('Sniffer.trigger 参数错误'); return; &#125; var funcName = option.name || '', // 函数名 base = option.base || window, // 基准对象，函数查找的起点 newList = [], // 用于更新list result, // 检测结果 func, // 存储执行方法的指针 i, // 遍历list param; // 临时存储list[i] if(funcName.length &lt; 1)&#123; return; &#125; // 遍历list，执行对应的函数，并将其从缓存池list中删除 for(i = 0; i &lt; list.length; i++)&#123; param = list[i]; if(param.name == funcName)&#123; result = checkMethod(funcName, base); if( result.success )&#123; try&#123; result.func.apply(result.func, param.args); &#125;catch(e)&#123; (typeof console != 'undefined') &amp;&amp; console.log &amp;&amp; console.log('错误:name='+ e.name +'; message='+ e.message); &#125; &#125; &#125;else&#123; newList.push(param); &#125; &#125; list = newList; &#125;; // 嗅探方法 function checkMethod(funcName, base)&#123; // 代码... &#125;&#125;)(window.Sniffer || (window.Sniffer = &#123;&#125;)); 如果前面的run方法看懂了，trigger方法也就不难理解了。 1. 首先要告知trigger方法，需要从队列list中拿出哪个方法执行。 2. 在执行方法之前，需要再次嗅探这个方法是否已经存在。存在了，才可以执行。否则，则可以认为方法已经不存在，可以从缓存中移除。 九、实用性和可靠度 实用性这方面是毋容置疑的，不管是什么代码栈，Sniffer.js都值得你拥有！ 可靠度方面，Sniffer.js使用在高流量的公司产品上，至今没有出现反馈任何兼容、或者性能问题。这方面也可以打包票！ 最后，附上源码地址:https://github.com/wall-wxk/sniffer/blob/master/sniffer.js","tags":[{"name":"sniffer.js","slug":"sniffer-js","permalink":"https://wall-wxk.github.io/tags/sniffer-js/"}]},{"title":"javascript模块化编程-详解立即执行函数表达式IIFE","date":"2017-02-12T16:46:14.000Z","path":"2017/02/13/moduleJs-IIFE/","text":"一、IIFE解释 全拼Imdiately Invoked Function Expression，立即执行的函数表达式。 像如下的代码所示，就是一个匿名立即执行函数: 123(function(window, undefined)&#123; // 代码... &#125;)(window); 二、括号的意义 2.1 包住function(){}的括号的意义 这个括号的目的，是为了把function(){}转化为表达式。像一些库的源码，喜欢用如下方式代替: 123~function()&#123; // 代码...&#125;(); 或者这种方式： 123+function()&#123; // 代码...&#125;(); 其实，作用都一样，都是把function(){}转化成一个可执行的表达式，方便执行。 如果去掉该括号，则会报错。因为单纯的function(){}不是可执行的表达式，会直接报错。如下图： 2.1 第二个括号的意义 理解了第一个括号的意义，第二个括号就很简单了，就是执行表达式了。 三、参数的意义 以这段代码为例子，讲解参数 1234var wall = &#123;&#125;;(function(window, WALL, undefined)&#123; &#125;)(window, wall); 参数分为形参和实参。 function(window, WALL, undefined)三个参数为形参，第二个括号(window, wall)的两个参数为实参。 也即可以理解为 window == window，wall == WALL。 2.1 普通形参 普通形参是指由window和wall这样的实际变量传入指定，可以为任何类型的变量。一个形参就对应一个实参 2.2 特殊形参undefined 为什么形参要多写一个undefined，这是一个很有趣的话题。 可以知道这个示例，实参只有两个，而形参有三个。所以在函数执行的时候，形参undefined会默认赋值为undefined。 形参undefined的作用如下： 2.2.1 防止特殊值undefined被恶意代码篡改。 IE6等低版本浏览器，undefined是支持被修改的。而这个特殊值被修改后，像以下这种判断就失效了。 123if(wall == undefined)&#123; // 代码...&#125; 所以，这里多加一个形参的目的就是为了防止这种情况发生。只要在这个IIFE作用域内，undefined就能够正常获取到。 2.2.2 压缩代码可以压缩undefined 因为undefined作为形参，像YUI compressor这种类型的代码压缩工具，可以将其相关的值进行压缩，减小文件的体积。 四、写法解析 4.1 普通写法 1234567891011121314151617181920var wall = &#123;&#125;; // 声明定义一个命名空间wall// 定义方法(function(window, WALL, undefined)&#123; // 给wall命名空间绑定方法say WALL.say = function()&#123; console.log('hello'); &#125;;&#125;)(window, wall);(function(window, WALL, undefined)&#123; // 给wall命名空间绑定方法 whoIam WALL.whoIam = function()&#123; console.log('wall'); &#125;;&#125;)(window, wall);// 调用wall.say();wall.whoIam(); 先定义一个命名空间，然后再给这个命名空间加东西。这是最普遍的写法，也是最好理解的。 不足的地方就是必须先声明一个命名空间，然后才能执行相关的绑定代码。存在顺序加载的问题。 4.2 放大模式 1234567891011121314151617181920212223242526272829var wall = (function(window, WALL, undefined)&#123; if(typeof WALL == 'undefined')&#123; WALL = &#123;&#125;; &#125; // 给wall命名空间绑定方法say WALL.say = function()&#123; console.log('hello'); &#125; return WALL; // 返回引用&#125;)(window, wall);var wall = (function(window, WALL, undefined)&#123; if(typeof WALL == 'undefined')&#123; WALL = &#123;&#125;; &#125; // 给wall命名空间绑定方法 whoIam WALL.whoIam = function()&#123; console.log('wall'); &#125; return WALL; // 返回引用&#125;)(window, wall);// 调用wall.say();wall.whoIam(); 放大模式的好处就是，可以不用考虑代码加载的先后顺序。 因为js允许wall变量进行重复var声明，所以这段代码是可以执行的。 我可以把IIFE函数拆分成多个文件进行加载，而不会出现普通写法需要注意的问题。 需要注意的点： 1.IIFE的头部，都要先进行检查命名空间是否已经实例化，如果还没实例化，则进行实例化。 2.IIFE的尾部，都要return命名空间的引用，使后续代码能够得到最新的wall命名空间内容。 4.3 宽放大模式 1234567891011121314151617(function(window, WALL, undefined)&#123; // 给wall命名空间绑定方法say WALL.say = function()&#123; console.log('hello'); &#125;&#125;)(window, window.wall || (window.wall = &#123;&#125;));(function(window, WALL, undefined)&#123; // 给wall命名空间绑定方法 whoIam WALL.whoIam = function()&#123; console.log('wall'); &#125;&#125;)(window, window.wall || (window.wall = &#123;&#125;));// 调用wall.say();wall.whoIam(); 宽放大模式的重点注意的地方：就是在实参部分的window.wall || (window.wall = {})。 用||运算符进行取巧。 如果window.wall是已经实例化的，非not defined。则直接返回window.wall的引用，赋值给形参WALL。不会执行||运算符后面的内容。 如果window.wall还未实例化，则进行实例化。这里要注意的点是实例化是一个赋值操作，需要用括号包起来，变成表达式去执行，才不会报错。 表达式(window.wall = {})执行完毕后，会返回新对象window.wall的引用。 宽放大模式的好处：是可以切割成多个文件进行加载，而不必考虑文件加载的先后顺序，不存在强耦合关系。 当然，如果IIFE里面的方法互相引用，还是存在加载依赖的问题。这个问题可以用加载器Require.js等工具解决，这里就不讨论了。 五、分文件加载IIFE要注意的点123456;(function(window, WALL, undefined)&#123; // 给wall命名空间绑定方法say WALL.say = function()&#123; console.log('hello'); &#125;&#125;)(window, window.wall || (window.wall = &#123;&#125;)); 眼尖的已经看出区别了，就是文件开始的地方，先写上分号;。 这样，多个文件合并的时候，才不会出现收尾相接，代码出现错乱的问题。比如下面这种情况： 12345678910// a.js 文件wall.log()// b.js 文件(function(window, WALL, undefined)&#123; // 给wall命名空间绑定方法say WALL.say = function()&#123; console.log('hello'); &#125;&#125;)(window, window.wall || (window.wall = &#123;&#125;)); 由于a.js文件的wall.log()少写了分号，跟b.js文件合并后，js就会认为‘wall.log()(…)’是需要这么执行的，结果代码就报错了。 觉得不错的，可以关注模块化这个系列的文章，容我后续码字，敬请期待！","tags":[{"name":"IIFE","slug":"IIFE","permalink":"https://wall-wxk.github.io/tags/IIFE/"}]},{"title":"福利贴-教你如何优雅地科学上网","date":"2017-02-07T14:01:24.000Z","path":"2017/02/07/gfw/","text":"一、吐槽 在我大天朝做开发，最虐心的就是GFW。平时想上GitHub、Facebook、YouTube，看看外面“资本主义的腐朽”，都不给机会😂😂😂 从最初的特定ip访问Google，到改host文件，再到使用红杏出墙（被封杀），到最后只能自己架设VPN。 最近工信部出个文件，连个人都不能弄VPN了💔 好！吐槽完了，说正事。。。 二、大杀器-Gaotizi Gaotizi是一家目前算正常运营的网站（希望不要被封杀）。它提供了Mac os x、Windows、Android、iphone等多终端软件进行翻墙的服务。这个可比chrome翻墙插件强多了。 以下是网站截图： 它提供的服务，直白点说：就是把VPN资源卖给你使用。 三、MAC 使用体验展示 3.1 下载软件并安装 安装双击打开，可以看到屏幕右上角出现纸飞机图标 3.2 配置服务器 登陆Gaotizi网站，进入产品服务列表，找到购买的服务。我这里是购买了季付计划。 点击二维码按钮，弹出弹窗 点击允许，则会自动添加服务器配置信息到shadowsocks。点击确定即可。 3.3 激动时刻 成功访问谷歌、GitHub😆 四、手机翻墙 手机翻墙软件，我使用的是Wingy 打开Wingy APP，然后点击左上角 + 号，进入以下页面 然后选择“扫描二维码”，扫一扫Gaotizi提供的二维码，就可以连接上VPN了 打开YouTube，妥妥滴~ 五、收费情况 我选择的是季付计划，30G流量，可以三台设备使用，80块钱，挺值！ 最后，附上传送门：https://www.gaotizi.com","tags":[{"name":"gfw","slug":"gfw","permalink":"https://wall-wxk.github.io/tags/gfw/"}]},{"title":"微信面试题-获取元素的最终background-color","date":"2017-02-05T15:00:04.000Z","path":"2017/02/05/wx-backgroundColor/","text":"一、题目 用JS代码求出页面上一个元素的最终的background-color，不考虑IE浏览器，不考虑元素float情况。 二、题目解析 1.考察底层JavaScript基础 前端开发，日常最常接触的就是页面样式的编写。而摆脱jQuery等工具库，用原生js获取样式，是每个前端程序猿进阶阶段必须掌握的技能。 2.考察面试者的思维缜密程度和开发经验 如果认为单单求元素计算后的样式，就有点too young了。页面的样式的复杂，永远是最虐心的。就算前端有多牛逼，一听到兼容IE6，论谁都会心塞😓。所以还要考虑特殊的情况：display，opacity，visibility的取值。 三、理论基础 1. 内联样式 内联样式可以通过元素的style属性获取，如果style属性有background-color值，则可以直接获取出来 (暂不考虑!important) 。 2. 外联的层叠样式 DOM2样式规范在document.defaultView中包含了一个getComputedStyle()方法。该方法返回一个只读的CSSStyleDeclaration对象，其中包含特定元素的所有计算样式。 四、解题4.1 将所有工具方法封装在WDS(wall dom script)命名空间中123(function(WDS, undefined)&#123; // 封装代码...&#125;)(window.WDS || (window.WDS = &#123;&#125;)); 代码封装在命名空间里，不会造成无意间的代码污染。 4.2 工具方法camelize123456// 字符串转换为驼峰写法function camelize(str) &#123; return str.replace(/-(\\w)/g, function (strMatch, p1)&#123; return p1.toUpperCase(); &#125;);&#125; 该方法是为了方便后续getStyle()方法的编写，而独立出来的。 作用是将连字符类的css属性值，转换成驼峰写法。 例如：将background-color转换为backgroundColor 4.3 获取特定元素的计算样式12345678910111213141516171819// 获取元素计算后的样式function getStyle(elem, property)&#123; if(!elem || !property)&#123; return false; &#125; var value = elem.style[camelize(property)], // 先获取是否有内联样式 css; // 获取的所有计算样式 // 无内联样式，则获取层叠样式表计算后的样式 if(!value)&#123; if(document.defaultView &amp;&amp; document.defaultView.getComputedStyle)&#123; css = document.defaultView.getComputedStyle(elem, null); value = css ? css.getPropertyValue(property) : null; &#125; &#125; return value;&#125; 做到这一步，第一个考察点基本就满足了。也能获知面试者是否具备足够扎实的js基础。 另外，像安全保护性的判断if(!elem || !property)和功能嗅探if(document.defaultView &amp;&amp; document.defaultView.getComputedStyle)，都能很好地体现开发者的代码逻辑和开发经验。 4.4 排除特殊情况12345678910111213141516171819202122// 检测获取的背景色是否有效function checkBgValue(elem)&#123; var value = getStyle(elem, 'background-color'), hasColor = value ? true : false; // 是否有颜色 // 排除特殊情况 if(value == \"transparent\" || value == \"rgba(0, 0, 0, 0)\")&#123; // 未设置background-color，或者设置为跟随父节点 hasColor = false; &#125;else if(getStyle(elem, 'opacity') == \"0\")&#123; // dom节点透明度为全透明 hasColor = false; &#125;else if(getStyle(elem, 'visibility') == \"hidden\")&#123; // dom节点不可见 hasColor = false; &#125;else if(getStyle(elem, 'display') == \"none\")&#123; // dom节点不可见 hasColor = false; &#125; return hasColor;&#125; 4.5 获取div在页面最终显示的颜色12345678910// 获取div最终显示的颜色function getRealBg(elem)&#123; if(checkBgValue(elem))&#123; return getStyle(elem, 'background-color'); &#125;else if(elem != document.documentElement)&#123; return getRealBg(elem.parentNode); &#125; return '';&#125; 获取样式值采用递归方式处理。 如果能顺利获取到元素样式，且不触发4.4 排除特殊情况中的一种，则直接返回结果。 触发了特殊情况，则需要查找父节点以及更上层的节点的样式，来获取肉眼能看到，显示在页面上的background-color值。 在向上回溯的过程中，如果已经回溯到html根节点，则可以停止回溯。所以加了判断else if(elem != document.documentElement) 五、遗漏的大boss5.1 大boss !important 如果乱用 !important，对大型项目的维护和开发，绝对是一场噩梦。因为优先级规则的计算，!important永远处在食物链的最顶层。 当前题目不考虑这种情况，也是我的偷懒😆。确实很棘手，就不写这个逻辑分支的代码了。这里提醒一下~ 5.2 大boss 父节点及根节点设置了不可见css属性 只要设置该css语句：html {display:none;}，页面所有元素立刻消失不见。而任意特定元素的上级节点，只要设置了 opacity,display,visibility，判断逻辑瞬间变得复杂起来。所以，这个浑水我也不趟 O(∩_∩)O哈哈~ 六、改进的点 其实特殊情况排除的判断，我偷懒没做到最好——rgb颜色值和特定颜色值(比如red)没有进行统一的转换，只是加了生硬的判断if(value == &quot;transparent&quot; || value == &quot;rgba(0, 0, 0, 0)&quot;)。 有兴趣的可以搜索下颜色值转换的js方法，这里我就不写了。 七、源码和demo源码地址：https://github.com/wall-wxk/blogDemo/blob/master/2017/02/05/getStyle.htmldemo：https://wall-wxk.github.io/blogDemo/2017/02/05/getStyle.html 补充 谢谢@烟雨雾岚 的提醒的新思路：canvas截图+Js获取图片某点颜色，这样可以完美解决所有的问题。","tags":[{"name":"微信","slug":"微信","permalink":"https://wall-wxk.github.io/tags/微信/"}]},{"title":"微信面试题-LazyMan的深入解析和实现","date":"2017-01-22T14:56:36.000Z","path":"2017/01/22/wx-lazyMan/","text":"一、题目介绍 以下是我copy自网上的面试题原文： 实现一个LazyMan，可以按照以下方式调用:LazyMan(“Hank”)输出:Hi! This is Hank! LazyMan(“Hank”).sleep(10).eat(“dinner”)输出Hi! This is Hank!//等待10秒..Wake up after 10Eat dinner~ LazyMan(“Hank”).eat(“dinner”).eat(“supper”)输出Hi This is Hank!Eat dinner~Eat supper~ LazyMan(“Hank”).sleepFirst(5).eat(“supper”)输出//等待5秒Wake up after 5Hi This is Hank!Eat supper 以此类推。 二、题目考察的点 先声明：我不是微信员工，考察的点是我推测的，可能不是，哈哈！ 1.方法链式调用 2.类的使用和面向对象编程的思路 3.设计模式的应用 4.代码的解耦 5.最少知识原则，也即 迪米特法则（Law of Demeter） 6.代码的书写结构和命名 三、题目思路解析 1.看题目输出示例，可以确定这是拟人化的输出，也就是说：应该编写一个类来定义一类人，叫做LazyMan。可以输出名字、吃饭、睡觉等行为。 2.从输出的句子可以看出，sleepFrist的优先级是最高的，其他行为的优先级一致。 3.从三个例子来看，都得先调用LazyMan来初始化一个人，才能继续后续行为，所以LazyMan是一个接口。 4.句子是按调用方法的次序进行顺序执行的，是一个队列。 四、采用观察者模式实现代码 4.1 采用模块模式来编写代码 123(function(window, undefined)&#123;&#125;)(window); 4.2 声明一个变量taskList，用来存储需要队列信息 123(function(window, undefined)&#123; var taskList = [];&#125;)(window); 队列中，单个项的存储设计为一个json，存储需要触发的消息，以及方法执行时需要的参数列表。比如LazyMan(‘Hank’)，需要的存储信息如下。1234&#123; 'msg':'LazyMan', 'args':'Hank'&#125; 当执行LazyMan方法的时候，调用订阅方法，将需要执行的信息存入taskList中，缓存起来。 存储的信息，会先保留着，等发布方法进行提取，执行和输出。 4.3 订阅方法 订阅方法的调用方式设计：subscribe(&quot;lazyMan&quot;, &quot;Hank&quot;) 12345678910111213141516171819202122(function(window, undefined)&#123; var taskList = []; // 订阅 function subscribe()&#123; var param = &#123;&#125;, args = Array.prototype.slice.call(arguments); if(args.length &lt; 1)&#123; throw new Error(\"subscribe 参数不能为空!\"); &#125; param.msg = args[0]; // 消息名 param.args = args.slice(1); // 参数列表 if(param.msg == \"sleepFirst\")&#123; taskList.unshift(param); &#125;else&#123; taskList.push(param); &#125; &#125;&#125;)(window); 用一个param变量来组织好需要存储的信息，然后push进taskList中，缓存起来。 特别的，如果是sleepFirst，则放置在队列头部。 4.4 发布方法 123456789101112(function(window, undefined)&#123; var taskList = []; // 订阅方法 代码... // 发布 function publish()&#123; if(taskList.length &gt; 0)&#123; run(taskList.shift()); &#125; &#125;&#125;)(window); 将队列中的存储信息读取出来，交给run方法(暂定，后续实现)去执行。这里限定每次发布只执行一个，以维持队列里面的方法可以挨个执行。 另外，这里使用shift()方法的原因是，取出一个，就在队列中删除这一个，避免重复执行。 4.5 实现LazyMan类1234567891011121314151617// 类function LazyMan()&#123;&#125;;LazyMan.prototype.eat = function(str)&#123; subscribe(\"eat\", str); return this;&#125;;LazyMan.prototype.sleep = function(num)&#123; subscribe(\"sleep\", num); return this;&#125;;LazyMan.prototype.sleepFirst = function(num)&#123; subscribe(\"sleepFirst\", num); return this;&#125;; 将LazyMan类实现，具有eat、sleep、sleepFrist等行为。 触发一次行为，就在taskList中记录一次，并返回当前对象，以支持链式调用。 4.6 实现输出console.log的包装方法 1234// 输出文字function lazyManLog(str)&#123; console.log(str);&#125; 为什么还要为console.log包装一层，是因为在实战项目中，产经经常会修改输出提示的UI。如果每一处都用console.log直接调用，那改起来就麻烦很多。 另外，如果要兼容IE等低级版本浏览器，也可以很方便的修改。 也就是DRY原则（Don’t Repeat Youself）。 4.7 实现具体执行的方法 12345678910111213141516171819202122232425262728// 具体方法function lazyMan(str)&#123; lazyManLog(\"Hi!This is \"+ str +\"!\"); publish();&#125;function eat(str)&#123; lazyManLog(\"Eat \"+ str +\"~\"); publish();&#125;function sleep(num)&#123; setTimeout(function()&#123; lazyManLog(\"Wake up after \"+ num); publish(); &#125;, num*1000); &#125;function sleepFirst(num)&#123; setTimeout(function()&#123; lazyManLog(\"Wake up after \"+ num); publish(); &#125;, num*1000);&#125; 这里的重点是解决setTimeout执行时会延迟调用，也即线程异步执行的问题。只有该方法执行成功后，再发布一次消息publish()，提示可以执行下一个队列信息。否则，就会一直等待。 4.8 实现run方法，用于识别要调用哪个具体方法，是一个总的控制台12345678910111213// 鸭子叫function run(option)&#123; var msg = option.msg, args = option.args; switch(msg)&#123; case \"lazyMan\": lazyMan.apply(null, args);break; case \"eat\": eat.apply(null, args);break; case \"sleep\": sleep.apply(null,args);break; case \"sleepFirst\": sleepFirst.apply(null,args);break; default:; &#125;&#125; 这个方法有点像鸭式辨型接口，所以注释叫鸭子叫。 run方法接收队列中的单个消息，然后读取出来，看消息是什么类型的，然后执行对应的方法。 4.9 暴露接口LazyMan，让外部可以调用1234567891011121314(function(window, undefined)&#123; // 很多代码... // 暴露接口 window.LazyMan = function(str)&#123; subscribe(\"lazyMan\", str); setTimeout(function()&#123; publish(); &#125;, 0); return new LazyMan(); &#125;;&#125;)(window); 接口LazyMan里面的publish方法必须使用setTimeout进行调用。这样能让publish()执行的线程延后，挂起。等链式方法都执行完毕后，线程空闲下来，再执行该publish()。 另外，这是一个对外接口，所以调用的时候，同时也会new 一个新的LazyMan，并返回，以供调用。 五、总结 1. 好处 使用观察者模式，让代码可以解耦到合理的程度，使后期维护更加方便。 比如我想修改eat方法，我只需要关注eat()和LazyMan.prototype.eat的实现。其他地方，我都可以不用关注。这就符合了最少知识原则。 2. 不足 LazyMan.prototype.eat这种方法的参数，其实可以用arguments代替，我没写出来，怕弄得太复杂，就留个优化点吧。 使用了unshift和shift方法，没有考虑到低版本IE浏览器的兼容。 六、完整源码和线上demo 完整源码已经放在我的gitHub上 源码入口：https://github.com/wall-wxk/blogDemo/blob/master/2017/01/22/lazyMan.html demo访问地址：https://wall-wxk.github.io/blogDemo/2017/01/22/lazyMan.html demo需要打开控制台，在控制台中调试代码。 七、番外 网上有人也实现了lazyMan，但是实现的方式我不是很喜欢和认同，但是也是一种思路，这里顺便贴出来给大伙看看。如何实现一个LazyMan：http://web.jobbole.com/89626/","tags":[{"name":"微信","slug":"微信","permalink":"https://wall-wxk.github.io/tags/微信/"},{"name":"lazyMan","slug":"lazyMan","permalink":"https://wall-wxk.github.io/tags/lazyMan/"}]},{"title":"localStorage的黑科技-js和css缓存机制","date":"2017-01-18T12:30:36.000Z","path":"2017/01/18/localStorage/","text":"一、发现黑科技的起因 今天在微信公众号看到一篇技术博文，想用印象笔记收藏，所以发送了文章链接到pc上。然后习惯性地打开控制台，看看源码，想了解下最近微信用了什么新技术。 呵呵，以下勾起了我侦探的欲望。页面加载后的异常点就是只加载了一个js，如下图所示： 我很诧异，为什么已经开启了Disable cache，js只加载了一个，而且体积这么小。接着，我按住Ctrl+O进行资源文件查找，发现我被“忽悠”了。其实根本就不止一个js文件。 脑袋里灵光一闪，不会是用localStorage做了缓存吧？！赶紧看了下localStronge,还真是。。。。 心里一阵澎湃，这不是我之前就想实现的加载性能优化的想法吗！乖乖，我孤陋寡闻了，已经有前端团队实现了代码。 二、谈谈文件加载方面的优化思路 通常，前端的资源文件加载优化，就是在文件不修改迭代的情况下，尽可能多地利用缓存，避免多次下载同样的文件。 一般的做法就是尽量延长资源的有效期，也就是设置 Cache-Control里的max-age，使页面资源请求的返回码为304，让浏览器直接使用本地缓存。 虽然pc端的协商缓存（304）很快，但手机端因为网络原因，协商缓存的效果就没pc端那么好了。而且，手机会经常清除本地缓存，所以文件缓存的时间也不会很长。 这个时候，localStorage就派上用场了。 localStorage相比cookie，可以缓存大体积的数据，而且是永久有效。所以，如果把js资源和css资源存储在localStorage中，则可以省去发送http请求所消耗的时间，大大提高用户的浏览体验。 三、用localStorage做资源缓存需要解决的问题3.1 版本更新机制 只要一个项目还在迭代开发，就难以避免需要更新资源文件。 普通的资源请求，可以根据 文件名+md5 http://res.wx.qq.com/mmbizwap/zh_CN/htmledition/js/biz_wap/moon32ebc4.js 或者 在资源链接后面加上特定的后缀http://1.ss.faisys.com/js/comm/fai.min.js?v=201612051739 做标识来判断是否需要更新资源。 如果用localStorage做，则需要一套新的缓存更新机制。 3.2 搭建更新代码的脚手架 使用localStorage缓存，则需要一个新的脚手架来管理资源文件的读取和写入。 3.3 后台输出一份资源配置信息 因为需要前端做资源更新，所以后台要输出一份依据给前端做判断用，也就是需要一份资源配置信息。前端根据配置信息，进行匹配和比较，最终决定 使用localStorage缓存，还是重新发起请求，下载最新的资源文件。 3.4 存在XSS安全隐患 localStorage中的信息，客户端是可以任意修改的。如果哪个黑客想练手一下，可以任意注入js代码。那么，在页面刷新的时候，注入的代码也将会被执行。 四、微信的做法解析4.1 版本标识 以__MOON__a/a_report.js为例，版本信息用key __MOON__a/a_report.js_ver存储，存储的value为//res.wx.qq.com/mmbizwap/zh_CN/htmledition/js/a/a_report32e586.js。 如果按普通加载方式，直接将该value取出来，设置到script节点的src属性，即可完成加载。 微信判断该版本是否最新，就是用该value值与后台输出的配置信息进行比较，最后得出是否更新的结果。 如果value值与配置信息一致，则使用缓存。否则，重新发起请求加载。 4.2 脚手架 可以看出，微信使用的是自己开发的脚手架moon.js，在这个网页中的实际文件名是moon32ebc4.js。 因为是混淆过变量名的文件，所以要看出具体代码的走向，有点费劲，这里就不做分析了。 4.3 资源配置信息 因为脚手架moon.js需要资源配置信息才能正常工作，所以配置信息一定会在moon.js之前输出。 依次查看moon.js之前的script标签，发现了window.moon_map这个json对象。 利用控制台输出该变量查看信息如下： 看到这里，可以明确一个点：这就是更新机制所必备的资源配置信息表了。 而且，可以看出，该配置信息json对象的key，就对应localStorage中的key。同理，value值也是一一对应。 4.4 XSS攻击 此处是为了验证微信的缓存机制是否存在XSS攻击，看到这里的童鞋可千万不要去做坏事。 我在一个js缓存代码中，插入alert(&quot;hehe&quot;);，看页面刷新的时候，是否会出现该弹窗，来验证是否存在攻击漏洞。 刷新页面后，结果如下图： 可以看出，微信也没有解决这类问题。所以，这种缓存机制，还是有先天不足的。 4.5 测试微信的更新机制 修改localStorage中 key __MOON__a/a_report.js_ver对应的value值，让微信的脚手架moon.js更新__MOON__a/a_report.js，刷掉我刚才主动插入的代码。 这里，我修改文件名为***587.js（原来的文件名为***586.js）。接着F5刷新页面。 结果为：report.js代码更新了，版本号也恢复回 ***586.js。 五、结论 localStorage缓存有其用武之地，但不是万能的。需要注意以上提及的坑。 可以应用的场景我归纳为以下几点： 1. 非首屏渲染需要的css文件，可以做LS缓存。 首屏渲染需要的css，需要按常规方式输出，因为SEO需要，不然爬虫爬取页面的时候，页面效果会很不好。而非首屏的css，则可以用LS缓存，减少资源下载时间。 2. 展示类、动画类等非业务主要逻辑的代码，可以做LS缓存。 这样，可以一定程度上避免业务层的安全漏洞。当然，前端再怎么做防护都是一层薄纸。重要的，还是后台接口要做好安全保护。 3. 移动端可以做LS缓存。PC端做LS缓存，起到的优化作用不大。 六、番外 有兴趣的童鞋，还可以看看知乎上大神们的讨论，静态资源（JS/CSS）存储在localStorage有什么缺点？为什么没有被广泛应用？ - 互联网 - 知乎 另外，腾讯网的前端，在gitHub上有分享其MT 模块管理框架，可以看看具体的实现逻辑。 最后，上一个栗子 —— 线上实例demo：webapp模块化开发体系","tags":[{"name":"微信","slug":"微信","permalink":"https://wall-wxk.github.io/tags/微信/"},{"name":"localStorage","slug":"localStorage","permalink":"https://wall-wxk.github.io/tags/localStorage/"}]},{"title":"动态加载css方法实现和深入解析","date":"2017-01-17T14:40:54.000Z","path":"2017/01/17/loadCss/","text":"一、方法引用来源和应用 此动态加载css方法 loadCss，剥离自Sea.js，并做了进一步的优化（优化代码后续会进行分析）。 因为公司项目需要用到懒加载来提高网站加载速度，所以将非首屏渲染必需的css文件进行动态加载操作。 二、优化后的完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111/** @function 动态加载css文件* @param &#123;string&#125; options.url -- css资源路径* @param &#123;function&#125; options.callback -- 加载后回调函数* @param &#123;string&#125; options.id -- link标签id*/function loadCss(options)&#123; var url = options.url, callback = typeof options.callback == \"function\" ? options.callback : function()&#123;&#125;, id = options.id, node = document.createElement(\"link\"), supportOnload = \"onload\" in node, isOldWebKit = +navigator.userAgent.replace(/.*(?:AppleWebKit|AndroidWebKit)\\/?(\\d+).*/i, \"$1\") &lt; 536, // webkit旧内核做特殊处理 protectNum = 300000; // 阈值10分钟，一秒钟执行pollCss 500次 node.rel = \"stylesheet\"; node.type = \"text/css\"; node.href = url; if( typeof id !== \"undefined\" )&#123; node.id = id; &#125; document.getElementsByTagName(\"head\")[0].appendChild(node); // for Old WebKit and Old Firefox if (isOldWebKit || !supportOnload) &#123; // Begin after node insertion setTimeout(function() &#123; pollCss(node, callback, 0); &#125;, 1); return; &#125; if(supportOnload)&#123; node.onload = onload; node.onerror = function() &#123; // 加载失败(404) onload(); &#125; &#125;else&#123; node.onreadystatechange = function() &#123; if (/loaded|complete/.test(node.readyState)) &#123; onload(); &#125; &#125; &#125; function onload() &#123; // 确保只跑一次下载操作 node.onload = node.onerror = node.onreadystatechange = null; // 清空node引用，在低版本IE，不清除会造成内存泄露 node = null; callback(); &#125; // 循环判断css是否已加载成功 /* * @param node -- link节点 * @param callback -- 回调函数 * @param step -- 计步器，避免无限循环 */ function pollCss(node, callback, step)&#123; var sheet = node.sheet, isLoaded; step += 1; // 保护，大于10分钟，则不再轮询 if(step &gt; protectNum)&#123; isLoaded = true; // 清空node引用 node = null; callback(); return; &#125; if(isOldWebKit)&#123; // for WebKit &lt; 536 if(sheet)&#123; isLoaded = true; &#125; &#125;else if(sheet)&#123; // for Firefox &lt; 9.0 try&#123; if(sheet.cssRules)&#123; isLoaded = true; &#125; &#125;catch(ex)&#123; // 火狐特殊版本，通过特定值获知是否下载成功 // The value of `ex.name` is changed from \"NS_ERROR_DOM_SECURITY_ERR\" // to \"SecurityError\" since Firefox 13.0. But Firefox is less than 9.0 // in here, So it is ok to just rely on \"NS_ERROR_DOM_SECURITY_ERR\" if(ex.name === \"NS_ERROR_DOM_SECURITY_ERR\")&#123; isLoaded = true; &#125; &#125; &#125; setTimeout(function() &#123; if(isLoaded)&#123; // 延迟20ms是为了给下载的样式留够渲染的时间 callback(); &#125;else&#123; pollCss(node, callback, step); &#125; &#125;, 20); &#125;&#125; 三、解析代码一、参数 本方法支持三个参数，可进行扩展。 1.1 opations.url url是需要引入的css资源路径，也即标签的href属性内容。 1.2 options.id id是标签的id属性。这个参数为非必要参数，可不传。主要作用是标记当前标签，方便js进行查找，以确定是否已加载某个css文件。 1.3 options.callback callback是css文件加载完成后会调用的回调函数。也存在特殊场景下，文件加载失败，回调函数仍旧执行的情况。 二、生成标签，并插入头部head，进行加载资源123456789101112var url = options.url, callback = typeof options.callback == \"function\" ? options.callback : function()&#123;&#125;, id = options.id, node = document.createElement(\"link\"); node.rel = \"stylesheet\";node.type = \"text/css\";node.href = url;if( typeof id !== \"undefined\" )&#123; node.id = id;&#125;document.getElementsByTagName(\"head\")[0].appendChild(node); 生成一个dom节点，然后配置好rel、type、href等必需的属性值，以便浏览器能正常解析链接的资源。 接着，查找到head节点，将节点插入。 三、实现css资源下载状态监控的pollCss方法 pollCss方法的职责是判断插入的link节点，也即node变量反馈资源是否已加载完成。 3.1 判断的主要依据 浏览器加载css资源，会给该link节点生成sheet属性，可以根据浏览器不同，读取sheet属性相关内容，来判断是否已经加载完成。所以第一句语句var sheet = node.sheet首先要做的就是获取sheet属性值。 3.2 普通浏览器判断12345678910111213try&#123; if(sheet.cssRules)&#123; isLoaded = true; &#125;&#125;catch(ex)&#123; // 火狐特殊版本，通过特定值获知是否下载成功 // The value of `ex.name` is changed from \"NS_ERROR_DOM_SECURITY_ERR\" // to \"SecurityError\" since Firefox 13.0. But Firefox is less than 9.0 // in here, So it is ok to just rely on \"NS_ERROR_DOM_SECURITY_ERR\" if(ex.name === \"NS_ERROR_DOM_SECURITY_ERR\")&#123; isLoaded = true; &#125;&#125; 如果读取sheet.cssRules有值，证明css资源已经链接进页面，并开始解析。此时可以判断资源加载成功。 如果读取失败，则根据抛错内容，判断是否有特定name属性ex.name === &quot;NS_ERROR_DOM_SECURITY_ERR&quot;。存在，则代表是低版本火狐（9.0以前），且资源已经加载成功。 3.3 旧webkit内核浏览器判断12345678var isOldWebKit = +navigator.userAgent.replace(/.*(?:AppleWebKit|AndroidWebKit)\\/?(\\d+).*/i, \"$1\") &lt; 536; // webkit旧内核做特殊处理if(isOldWebKit)&#123; // for WebKit &lt; 536 if(sheet)&#123; isLoaded = true; &#125;&#125; 如果是webkit旧内核浏览器，则只需要判断sheet属性值存在，则代表资源加载完成。 3.4 增加多次循环检测12345678setTimeout(function() &#123; if(isLoaded)&#123; // 延迟20ms是为了给下载的样式留够渲染的时间 callback(); &#125;else&#123; pollCss(node, callback, step); &#125;&#125;, 20); 触发pollCss方法后，可能第一次检测sheet值，会检测不到。也就代表还没加载完成。所以需要进行轮询。这里是隔20ms进行一次问询，直到资源加载完成为止。 3.5 轮询容错（针对Sea.js源码的优化） css资源加载也有可能出错的时机存在，而且存在不触发onerror方法的可能性。如果不加一个保护，则轮询可能一直持续下去，所以需要有一个极限阈值。1234567891011121314151617var protectNum = 300000, // 阈值10分钟，一秒钟执行pollCss 500次 step = 0;// 很多代码....step += 1;// 保护，大于10分钟，则不再轮询if(step &gt; protectNum)&#123; isLoaded = true; // 清空node引用 node = null; callback(); return;&#125; 这里的阈值是轮询10分钟，如果10分钟后，仍然不符合条件，则默认资源已下载完成，执行callback方法，并清空node引用。 四、确定触发pollCss检查的时机 4.1 pollCss轮询的应用场景 当浏览器内核是旧的webkit内核时，或者不支持节点触发onload方法时，才使用pollCss进行轮询。12345678// for Old WebKit and Old Firefoxif (isOldWebKit || !supportOnload) &#123; // Begin after node insertion setTimeout(function() &#123; pollCss(node, callback, 0); &#125;, 1); return;&#125; 五、现代浏览器直接用onload和onreadystatechange做判断 现代浏览器用这种方式判断，可以避免轮询的弊端。判断也更加准确及时。 5.1 onload方法123456789function onload() &#123; // 确保只跑一次下载操作 node.onload = node.onerror = node.onreadystatechange = null; // 清空node引用，在低版本IE，不清除会造成内存泄露 node = null; callback();&#125; onload方法触发执行后，应立即将多个相关方法进行重置，以避免callback多次触发。 node = null;将node重置为null，是为了避免低版本的IE出现内存溢出问题，及时清除没用的dom节点。 最后，执行callback方法。 5.2 支持onload方法浏览器的处理1234567if(supportOnload)&#123; node.onload = onload; node.onerror = function() &#123; // 加载失败(404) onload(); &#125;&#125; 5.3 不支持onload方法浏览器的处理123456789if(supportOnload)&#123; // 代码...&#125;else&#123; node.onreadystatechange = function() &#123; if (/loaded|complete/.test(node.readyState)) &#123; onload(); &#125; &#125;&#125; 四、后记 选择剥离Sea.js方法进行改造的原因：因为该js库使用人群很广泛，如果出问题，作者也会及时修复。所以，以此代码为蓝本进行改造契合公司的用户群，避免大面积出现问题。 在产品上应用该方法后，到目前为止，未有客户反馈样式异常问题。所以，看本文章的程序猿们，可以放心使用。 ps：公司用户群有1千多万的用户量，涉及大大小小繁杂的浏览器，从IE6到chrome都有。","tags":[{"name":"loadCss","slug":"loadCss","permalink":"https://wall-wxk.github.io/tags/loadCss/"},{"name":"Sea.js","slug":"Sea-js","permalink":"https://wall-wxk.github.io/tags/Sea-js/"}]}]